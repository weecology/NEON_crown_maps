#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('hard_mining.py'): {65L: (0,
        None,
        1,
        0)}}
debug.err-values = {loc('../../../../Applications/WingIDE.app/Contents/Resources/src/testing/runners/run_pytest_xml.py'): {}}
debug.exceptions-ignored = {loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/_pytest/_code/code.py'): {209: True},
                            loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/_pytest/config/__init__.py'): {1130: True}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'NyVPHO0lKJlWFE6ZB7U3wBBhIF'\
        'xqemTE',
        'size-state': 'fullscreen',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.28593831677992687,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(1,),
        (2,),
        (2,
         0),
        (3,)],
                                 'selected-nodes': [],
                                 'top-node': (1,
        2)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.5,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'weights',
                                       'fReverse': False,
                                       'fSearchText': u'load_model',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'source-lineno',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [(1,)],
                                      'top-node': (0,)}}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'weights',
                                       'fReverse': False,
                                       'fSearchText': u'Image.open',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 21338L,
                       'folded-linenos': [],
                       'history': {u'file:/Applications/WingIDE.app/Contents/Resources/src/testing/runners/run_pytest_xml.py': ['n'\
        'p.moveaxis(numpy_raster,0,2)\n',
        'numpy_raster = np.moveaxis(numpy_raster,0,2)\n',
        'crop = numpy_raster[crop_index[lowest_index]]\n',
        'numpy_raster = raster.window(crop_index[lowest_index])\n',
        'from rasterio import windows\n',
        'raster\n',
        'raster.window_bounds()\n',
        'from rasterio import windows as rwindow\n',
        'rasterio_window = rwindow.Window(args, kwargs)\n',
        'rasterio_window = rwindow.Window()\n',
        'rasterio_window = rwindow.Window.from_slices(crop_index[lowest_inde'\
        'x])\n',
        'rasterio_window = rwindow.Window.from_slices(crop_index[lowest_inde'\
        'x][0])\n',
        'rasterio_window.read()\n',
        'rasterio_window = raster.read(window=rwindow.Window.from_slices(row'\
        's=crop_index[lowest_index][0],cols=crop_index[lowest_index][0]))\n',
        'rasterio_window.shape\n',
        'numpy_raster = np.moveaxis(rasterio_window,0,2)\n',
        'rasterio_window = raster.read(window=rwindow.Window.from_slices(row'\
        's=crop_index[lowest_index][0],cols=crop_index[lowest_index][0]))\n'\
        'crop = np.moveaxis(rasterio_window,0,2)\ncrop_filename = os.path.jo'\
        'in(save_dir,"{}_{}.tif".format(image_name,lowest_index))\ncv2.imwri'\
        'te(crop_filename, crop)\n\n',
        'rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest'\
        '_index][0],cols=crop_index[lowest_index][0])\n',
        "with rasterio.open(\n    crop_filename, 'w',\n        driver='GTiff"\
        "',\n        dtype=raster.dtype) as dst:\n    dst.write(image, windo"\
        "w=rasterio_window, indexes=1)\n\n",
        "with rasterio.open(\n    crop_filename, 'w',\n        driver='GTiff"\
        "') as dst:\n    dst.write(image, window=rasterio_window, indexes=1)"\
        "\n\n",
        "with rasterio.open(\n    crop_filename, 'w',\n        driver='GTiff"\
        "',\n        dtype=rasterio.ubyte) as dst:\n    dst.write(image, win"\
        "dow=rasterio_window, indexes=1)\n\n",
        "rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest"\
        "_index][0],cols=crop_index[lowest_index][0])\nout_profile = raster."\
        "profile.copy()    \ncrop_filename = os.path.join(save_dir,\"{}_{}.t"\
        "if\".format(image_name,lowest_index))    \ndst = rasterio.open(crop"\
        "_filename, 'w', **out_profile)\ndst.write(raster, window=rasterio_w"\
        "indow)\n\n",
        'raster.shape\n',
        'RP1_block.shape\n',
        'dst.close()\n',
        'utm\n',
        'raster = rasterio.open(image_path)\n',
        'rasterio_window = rwindow.Window.from_slices(cols=crop_index[lowest'\
        '_index][0],rows=crop_index[lowest_index][0])\nout_profile = raster.'\
        'profile.copy()    \ncrop_filename = os.path.join(save_dir,"{}_{}.ti'\
        'f".format(image_name,lowest_index)) \nRP1_block = raster.read(windo'\
        'w=rasterio_window, masked=True)  \ndst.write(RP1_block, window=rast'\
        'erio_window)\ndst.close()\n\n',
        'rasterio_window = rwindow.Window.from_slices(cols=crop_index[lowest'\
        '_index][0],rows=crop_index[lowest_index][0])\nout_profile = raster.'\
        'profile.copy()    \ncrop_filename = os.path.join(save_dir,"{}_{}.ti'\
        'f".format(image_name,lowest_index)) \nRP1_block = raster.read(windo'\
        'w=rasterio_window, masked=True)  \ndst.write(RP1_block, window=rast'\
        'erio_window)\n\n',
        'rasterio_window = rwindow.Window.from_slices(cols=crop_index[lowest'\
        '_index][0],rows=crop_index[lowest_index][0])\n',
        'rasterio_window\n',
        'out_profile = raster.profile.copy()\n',
        'RP1_block = raster.read(window=rasterio_window, masked=True)\n',
        'dst.write(RP1_block, window=rasterio_window)\n',
        'crop_index[lowest_index]\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(cols=crop_index[lowest_index][0][0],rows=crop_index[lowest_ind"\
        "ex][0][1])\nout_profile = raster.profile.copy()    \ncrop_filename "\
        "= os.path.join(save_dir,\"{}_{}.tif\".format(image_name,lowest_inde"\
        "x)) \nwith  rasterio.open(crop_filename, 'w', **out_profile) as dst"\
        ":\n    RP1_block = raster.read(window=rasterio_window, masked=True)"\
        "  \n    dst.write(RP1_block, window=rasterio_window)\n\n",
        'crop_index[lowest_index][0]\n',
        'crop_index[lowest_index][1]\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(cols=crop_index[lowest_index][0],rows=crop_index[lowest_index]"\
        "[1])\nout_profile = raster.profile.copy()    \ncrop_filename = os.p"\
        "ath.join(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \n"\
        "with  rasterio.open(crop_filename, 'w', **out_profile) as dst:\n   "\
        " RP1_block = raster.read(window=rasterio_window, masked=True)  \n  "\
        "  dst.write(RP1_block, window=rasterio_window)\n\n",
        'crop_index\n',
        'rwindow.Window\n',
        'raster.crs\n',
        'windows[499]\n',
        'windows\n',
        'scores\n',
        'scores[0]\n',
        'scores[19]\n',
        'scores[10]\n',
        'score_df.head()\n',
        'crop_index[index]\n',
        'index\n',
        'data[index] = filtered_boxes\n',
        'lowest_index    \n',
        'score_df.index\n',
        'score_df = pd.Series(scores)\n',
        'lowest = score_df.min()\n',
        'lowest_index = score_df[score_df == lowest].index[0]\n',
        'lowest_index\n',
        'worst_window = data[lowest_index]\n',
        'worst_window\n',
        'window = crop_index[lowest_index]\n',
        'window.indices()\n',
        'lowest\n',
        'print(index)\n#transform    \nxmin = (window_xmin * cell_size) + ut'\
        'm_xmin\nxmax = (window_xmin + width) * cell_size  + utm_xmin\nymin '\
        '= (window_ymin) * cell_size  + utm_ymin\nymax = (window_ymin + heig'\
        'ht) * cell_size  + utm_ymin\n\n',
        '#Spatial clip to window using spatial index for faster querying\npo'\
        'ssible_matches_index = list(spatial_index.intersection([xmin,ymin,x'\
        'max,ymax]))\npossible_matches = shp.iloc[possible_matches_index]\n'\
        '\n',
        'filtered_boxes = possible_matches.cx[xmin:xmax,ymin:ymax]\n',
        'filtered_boxes\n',
        'filtered_boxes.score\n',
        'from PIL import Image\n',
        'pil_image = Image.open(image_path)\n',
        'numpy_image = np.array(pil_image)\n',
        'crop = numpy_image[window.indices()]\n',
        'crop\n',
        'crop_filename = os.path.join(save_dir,"{}_{}.tif".format(image_name'\
        ',lowest_index))\n',
        'cv2.imwrite(crop_filename, crop)\n',
        "rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest"\
        "_index][0],cols=crop_index[lowest_index][1])\nout_profile = raster."\
        "profile.copy()    \ncrop_filename = os.path.join(save_dir,\"{}_{}.t"\
        "if\".format(image_name,lowest_index)) \nwith  rasterio.open(crop_fi"\
        "lename, 'w', **out_profile) as dst:\n    RP1_block = raster.read(wi"\
        "ndow=rasterio_window, masked=True)  \n    dst.write(RP1_block, wind"\
        "ow=rasterio_window)\n\n",
        'rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest'\
        '_index][0],cols=crop_index[lowest_index][1])\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w', **out_p"\
        "rofile) as dst:\n    RP1_block = raster.read(window=rasterio_window"\
        ", masked=True)  \n    dst.write(RP1_block, window=rasterio_window)"\
        "\n\n",
        "rasterio_window = rwindow.Window.from_slices(rows=-crop_index[lowes"\
        "t_index].indices()[0],cols=-crop_index[lowest_index].indices()[1])"\
        "\nout_profile = raster.profile.copy()    \ncrop_filename = os.path."\
        "join(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith"\
        "  rasterio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1"\
        "_block = raster.read(window=rasterio_window, masked=True)  \n    ds"\
        "t.write(RP1_block, window=rasterio_window)\n\n",
        'crop_index[lowest_index].indices()[0]\n',
        '-crop_index[lowest_index].indices()[0]\n',
        'crop_index[lowest_index].indices()\n',
        "rows = slice(-6460, -6860, None)\ncols = slice(-5440, -5840, None)"\
        "\nrasterio_window = rwindow.Window.from_slices(rows=rows,cols=cols)"\
        "\nout_profile = raster.profile.copy()    \ncrop_filename = os.path."\
        "join(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith"\
        "  rasterio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1"\
        "_block = raster.read(window=rasterio_window, masked=True)  \n    ds"\
        "t.write(RP1_block, window=rasterio_window)\n\n",
        "rows = slice(-6460, -6860, None)\ncols = slice(-5440, -5840, None)"\
        "\nrasterio_window = rwindow.Window.from_slices(rows=rows,cols=cols,"\
        "height=400)\nout_profile = raster.profile.copy()    \ncrop_filename"\
        " = os.path.join(save_dir,\"{}_{}.tif\".format(image_name,lowest_ind"\
        "ex)) \nwith  rasterio.open(crop_filename, 'w', **out_profile) as ds"\
        "t:\n    RP1_block = raster.read(window=rasterio_window, masked=True"\
        ")  \n    dst.write(RP1_block, window=rasterio_window)\n\n",
        "#save RGB windows to file\nrows = slice(-6460, -6860, None)\ncols ="\
        " slice(-5440, -5840, None)\nrasterio_window = rwindow.Window.from_s"\
        "lices(rows=rows,cols=cols,height=400,width=400)\nout_profile = rast"\
        "er.profile.copy()    \ncrop_filename = os.path.join(save_dir,\"{}_{"\
        "}.tif\".format(image_name,lowest_index)) \nwith  rasterio.open(crop"\
        "_filename, 'w', **out_profile) as dst:\n    RP1_block = raster.read"\
        "(window=rasterio_window, masked=True)  \n    dst.write(RP1_block, w"\
        "indow=rasterio_window)\n\n",
        'rows = slice(6460, 6860, None)\ncols = slice(-5440, -5840, None)\n'\
        'rasterio_window = rwindow.Window.from_slices(rows=rows,cols=cols,he'\
        'ight=400,width=400)\n\n',
        "out_profile = raster.profile.copy()    \ncrop_filename = os.path.jo"\
        "in(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith  "\
        "rasterio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1_b"\
        "lock = raster.read(window=rasterio_window, masked=True)  \n    dst."\
        "write(RP1_block, window=rasterio_window)\n    \n#Format annotations"\
        " frame\nshp_filename = os.path.join(save_dir,\"{}_{}.shp\".format(i"\
        "mage_name,lowest_index))    \nworst_window.to_file(shp_filename, dr"\
        "iver='ESRI Shapefile')\n\n",
        "rows = slice(6460, 6860, None)\ncols = slice(5440, 5840, None)\nras"\
        "terio_window = rwindow.Window.from_slices(rows=rows,cols=cols,heigh"\
        "t=400,width=400)\nout_profile = raster.profile.copy()    \ncrop_fil"\
        "ename = os.path.join(save_dir,\"{}_{}.tif\".format(image_name,lowes"\
        "t_index)) \nwith  rasterio.open(crop_filename, 'w', **out_profile) "\
        "as dst:\n    RP1_block = raster.read(window=rasterio_window, masked"\
        "=True)  \n    dst.write(RP1_block, window=rasterio_window)\n    \n"\
        "#Format annotations frame\nshp_filename = os.path.join(save_dir,\""\
        "{}_{}.shp\".format(image_name,lowest_index))    \nworst_window.to_f"\
        "ile(shp_filename, driver='ESRI Shapefile')\n\n",
        'window_xmin, window_ymin, width, height = window.getRect()\n',
        'window_xmin\n',
        'xmin = (window_xmin * cell_size) + utm_xmin\nxmax = (window_xmin + '\
        'width) * cell_size  + utm_xmin\nymin = (window_ymin) * cell_size  +'\
        ' utm_ymin\nymax = (window_ymin + height) * cell_size  + utm_ymin\n'\
        '\n',
        'utm_xmin\n',
        'utm_ymin\n',
        'raster.bounds\n',
        'xmin\n',
        'xmax\n',
        'ymin\n',
        'ymax\n',
        'window_ymin\n',
        'height\n']},
                       'launch-id': None,
                       'sel-line': 21354L,
                       'sel-line-start': 1610414L,
                       'selection_end': 1610414L,
                       'selection_start': 1610414L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 0L,
                       'folded-linenos': [],
                       'history': {None: ['import geopandas\n']},
                       'launch-id': None,
                       'sel-line': 5L,
                       'sel-line-start': 359L,
                       'selection_end': 359L,
                       'selection_start': 359L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rtree/index.py'),
        {'attrib-starts': [('Index',
                            92),
                           ('Index.get_coordinate_pointers',
                            291)],
         'first-line': 286L,
         'folded-linenos': [],
         'sel-line': 311L,
         'sel-line-start': 10427L,
         'selection_end': 10427L,
         'selection_start': 10427L,
         'zoom': 0L},
        1580494140.227962],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             10)],
          'first-line': 32L,
          'folded-linenos': [],
          'sel-line': 46L,
          'sel-line-start': 1582L,
          'selection_end': 1656L,
          'selection_start': 1582L,
          'zoom': 0L},
         1580494148.048007],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rtree/index.py'),
         {'attrib-starts': [('Index',
                             92),
                            ('Index.get_coordinate_pointers',
                             291)],
          'first-line': 297L,
          'folded-linenos': [],
          'sel-line': 311L,
          'sel-line-start': 10427L,
          'selection_end': 10427L,
          'selection_start': 10427L,
          'zoom': 0L},
         1580494153.483533],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             10)],
          'first-line': 35L,
          'folded-linenos': [],
          'sel-line': 45L,
          'sel-line-start': 1486L,
          'selection_end': 1572L,
          'selection_start': 1572L,
          'zoom': 0L},
         1580494224.749013],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/geopandas/base.py'),
         {'attrib-starts': [('_delegate_binary_method',
                             39)],
          'first-line': 29L,
          'folded-linenos': [],
          'sel-line': 54L,
          'sel-line-start': 1478L,
          'selection_end': 1478L,
          'selection_start': 1478L,
          'zoom': 0L},
         1580494231.800844],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             10)],
          'first-line': 35L,
          'folded-linenos': [],
          'sel-line': 48L,
          'sel-line-start': 1644L,
          'selection_end': 1735L,
          'selection_start': 1686L,
          'zoom': 0L},
         1580494282.592449],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/geopandas/base.py'),
         {'attrib-starts': [('_delegate_binary_method',
                             39)],
          'first-line': 40L,
          'folded-linenos': [],
          'sel-line': 54L,
          'sel-line-start': 1478L,
          'selection_end': 1478L,
          'selection_start': 1478L,
          'zoom': 0L},
         1580494317.272528],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             10)],
          'first-line': 35L,
          'folded-linenos': [],
          'sel-line': 48L,
          'sel-line-start': 1644L,
          'selection_end': 1709L,
          'selection_start': 1669L,
          'zoom': 0L},
         1580494365.844669],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/geopandas/base.py'),
         {'attrib-starts': [('_delegate_binary_method',
                             39)],
          'first-line': 40L,
          'folded-linenos': [],
          'sel-line': 55L,
          'sel-line-start': 1527L,
          'selection_end': 1527L,
          'selection_start': 1527L,
          'zoom': 0L},
         1580494386.952949],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/geopandas/array.py'),
         {'attrib-starts': [('GeometryArray',
                             402),
                            ('GeometryArray.total_bounds',
                             747)],
          'first-line': 726L,
          'folded-linenos': [],
          'sel-line': 751L,
          'sel-line-start': 23107L,
          'selection_end': 23107L,
          'selection_start': 23107L,
          'zoom': 0L},
         1580494390.933734],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/geopandas/base.py'),
         {'attrib-starts': [('_CoordinateIndexer',
                             774),
                            ('_CoordinateIndexer.__getitem__',
                             780)],
          'first-line': 768L,
          'folded-linenos': [],
          'sel-line': 791L,
          'sel-line-start': 27830L,
          'selection_end': 27830L,
          'selection_start': 27830L,
          'zoom': 0L},
         1580494392.945973],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             10)],
          'first-line': 52L,
          'folded-linenos': [],
          'sel-line': 70L,
          'sel-line-start': 2487L,
          'selection_end': 2524L,
          'selection_start': 2487L,
          'zoom': 0L},
         1580494864.135616],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             122),
                            ('NDFrame.__setattr__',
                             5180)],
          'first-line': 5167L,
          'folded-linenos': [],
          'sel-line': 5182L,
          'sel-line-start': 171530L,
          'selection_end': 171558L,
          'selection_start': 171558L,
          'zoom': 0L},
         1580494896.882276],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             12)],
          'first-line': 49L,
          'folded-linenos': [],
          'sel-line': 66L,
          'sel-line-start': 2261L,
          'selection_end': 2342L,
          'selection_start': 2315L,
          'zoom': 0L},
         1580497342.370978],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             13)],
          'first-line': 58L,
          'folded-linenos': [],
          'sel-line': 73L,
          'sel-line-start': 2516L,
          'selection_end': 2982L,
          'selection_start': 2516L,
          'zoom': 0L},
         1580498675.045677],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rasterio/windows.py'),
         {'attrib-starts': [('Window',
                             480),
                            ('Window.from_slices',
                             547)],
          'first-line': 588L,
          'folded-linenos': [],
          'sel-line': 613L,
          'sel-line-start': 17560L,
          'selection_end': 17560L,
          'selection_start': 17560L,
          'zoom': 0L},
         1580498693.674697],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             13)],
          'first-line': 58L,
          'folded-linenos': [],
          'sel-line': 73L,
          'sel-line-start': 2516L,
          'selection_end': 2993L,
          'selection_start': 2516L,
          'zoom': 0L},
         1580498704.660943],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rasterio/windows.py'),
         {'attrib-starts': [('Window',
                             480),
                            ('Window.from_slices',
                             547)],
          'first-line': 601L,
          'folded-linenos': [],
          'sel-line': 624L,
          'sel-line-start': 17914L,
          'selection_end': 17914L,
          'selection_start': 17914L,
          'zoom': 0L},
         1580498709.802006],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             13)],
          'first-line': 48L,
          'folded-linenos': [],
          'sel-line': 63L,
          'sel-line-start': 2107L,
          'selection_end': 2163L,
          'selection_start': 2163L,
          'zoom': 0L},
         1580499476.032044],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rtree/index.py'),
         {'attrib-starts': [('Index',
                             92),
                            ('Index.intersection',
                             412)],
          'first-line': 430L,
          'folded-linenos': [],
          'sel-line': 453L,
          'sel-line-start': 16168L,
          'selection_end': 16168L,
          'selection_start': 16168L,
          'zoom': 0L},
         1580499482.316605]],
        20),
        'current-loc': loc('hard_mining.py'),
        'editor-state-list': [(loc('dask_example.py'),
                               {'attrib-starts': [('available',
        29)],
                                'first-line': 33L,
                                'folded-linenos': [],
                                'sel-line': 36L,
                                'sel-line-start': 931L,
                                'selection_end': 935L,
                                'selection_start': 935L,
                                'zoom': 0L}),
                              (loc('start_cluster.py'),
                               {'attrib-starts': [],
                                'first-line': 30L,
                                'folded-linenos': [],
                                'sel-line': 5L,
                                'sel-line-start': 105L,
                                'selection_end': 118L,
                                'selection_start': 118L,
                                'zoom': 0L}),
                              (loc('SLURM/test.sbatch'),
                               {'attrib-starts': [],
                                'first-line': 6L,
                                'folded-linenos': [],
                                'sel-line': 19L,
                                'sel-line-start': 541L,
                                'selection_end': 560L,
                                'selection_start': 558L,
                                'zoom': 0L}),
                              (loc('available.py'),
                               {'attrib-starts': [('available',
        1)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 5L,
                                'sel-line-start': 99L,
                                'selection_end': 112L,
                                'selection_start': 112L,
                                'zoom': 0L}),
                              (loc('SLURM/generate.sbatch'),
                               {'attrib-starts': [],
                                'first-line': 2L,
                                'folded-linenos': [],
                                'sel-line': 14L,
                                'sel-line-start': 525L,
                                'selection_end': 590L,
                                'selection_start': 525L,
                                'zoom': 0L}),
                              (loc('main.py'),
                               {'attrib-starts': [('run',
        5)],
                                'first-line': 17L,
                                'folded-linenos': [],
                                'sel-line': 18L,
                                'sel-line-start': 543L,
                                'selection_end': 547L,
                                'selection_start': 547L,
                                'zoom': 0L}),
                              (loc('predict.py'),
                               {'attrib-starts': [('parse_prediction',
        76)],
                                'first-line': 69L,
                                'folded-linenos': [],
                                'sel-line': 79L,
                                'sel-line-start': 3401L,
                                'selection_end': 3424L,
                                'selection_start': 3419L,
                                'zoom': 0L}),
                              (loc('SLURM/predict.sbatch'),
                               {'attrib-starts': [],
                                'first-line': 6L,
                                'folded-linenos': [],
                                'sel-line': 12L,
                                'sel-line-start': 521L,
                                'selection_end': 537L,
                                'selection_start': 537L,
                                'zoom': 0L}),
                              (loc('hard_mining.py'),
                               {'attrib-starts': [('run',
        13)],
                                'first-line': 54L,
                                'folded-linenos': [],
                                'sel-line': 64L,
                                'sel-line-start': 2164L,
                                'selection_end': 2182L,
                                'selection_start': 2182L,
                                'zoom': 0L}),
                              (loc('utils/tfrecords.py'),
                               {'attrib-starts': [('create_tfrecords',
        26)],
                                'first-line': 79L,
                                'folded-linenos': [],
                                'sel-line': 39L,
                                'sel-line-start': 1311L,
                                'selection_end': 1329L,
                                'selection_start': 1329L,
                                'zoom': 0L}),
                              (loc('tests/test_hard_mining.py'),
                               {'attrib-starts': [('test_run',
        3)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 6L,
                                'sel-line-start': 254L,
                                'selection_end': 254L,
                                'selection_start': 254L,
                                'zoom': 0L}),
                              (loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py'),
                               {'attrib-starts': [('NDFrame',
        122),
        ('NDFrame.__setattr__',
         5180)],
                                'first-line': 5167L,
                                'folded-linenos': [],
                                'sel-line': 5182L,
                                'sel-line-start': 171530L,
                                'selection_end': 171558L,
                                'selection_start': 171558L,
                                'zoom': 0L}),
                              (loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rtree/index.py'),
                               {'attrib-starts': [('Index',
        92),
        ('Index.intersection',
         412)],
                                'first-line': 430L,
                                'folded-linenos': [],
                                'sel-line': 453L,
                                'sel-line-start': 16168L,
                                'selection_end': 16168L,
                                'selection_start': 16168L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('dask_example.py'),
         loc('start_cluster.py'),
         loc('SLURM/test.sbatch'),
         loc('available.py'),
         loc('SLURM/generate.sbatch'),
         loc('main.py'),
         loc('predict.py'),
         loc('SLURM/predict.sbatch'),
         loc('hard_mining.py'),
         loc('utils/tfrecords.py'),
         loc('tests/test_hard_mining.py'),
         loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py'),
         loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rtree/index.py')]),
                               'open_files': [u'SLURM/generate.sbatch',
        u'SLURM/test.sbatch',
        u'available.py',
        u'dask_example.py',
        u'start_cluster.py',
        u'tests/test_hard_mining.py',
        u'main.py',
        u'SLURM/predict.sbatch',
        u'predict.py',
        u'utils/tfrecords.py',
        u'../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py',
        u'hard_mining.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.2736784140969163},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (1440,
                         0,
                         1920,
                         1080)}]}
guimgr.recent-documents = [loc('hard_mining.py'),
                           loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rtree/index.py'),
                           loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rasterio/windows.py'),
                           loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py'),
                           loc('utils/tfrecords.py'),
                           loc('predict.py'),
                           loc('SLURM/predict.sbatch'),
                           loc('main.py'),
                           loc('tests/test_hard_mining.py')]
guimgr.visual-state = {loc('../DeepForest/.travis.yml'): {'attrib-starts': [],
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 186L,
        'selection_end': 233L,
        'selection_start': 233L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/deepforest.py'): {'attr'\
        'ib-starts': [],
        'first-line': 115L,
        'folded-linenos': [],
        'sel-line': 30L,
        'sel-line-start': 956L,
        'selection_end': 1007L,
        'selection_start': 994L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/predict.py'): {'attrib-'\
        'starts': [('predict_image',
                    22)],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 82L,
        'sel-line-start': 3281L,
        'selection_end': 3298L,
        'selection_start': 3298L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/preprocess.py'): {'attr'\
        'ib-starts': [('split_raster',
                       115)],
        'first-line': 150L,
        'folded-linenos': [],
        'sel-line': 161L,
        'sel-line-start': 6779L,
        'selection_end': 6796L,
        'selection_start': 6787L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/retinanet_train.py'): {'a'\
        'ttrib-starts': [('create_generators',
                          179)],
        'first-line': 207L,
        'folded-linenos': [],
        'sel-line': 220L,
        'sel-line-start': 8520L,
        'selection_end': 8544L,
        'selection_start': 8537L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/tfrecords.py'): {'attri'\
        'b-starts': [('_parse_fn',
                      164)],
        'first-line': 162L,
        'folded-linenos': [],
        'sel-line': 167L,
        'sel-line-start': 7432L,
        'selection_end': 7448L,
        'selection_start': 7448L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/utilities.py'): {'attri'\
        'b-starts': [('use_release',
                      52)],
        'first-line': 80L,
        'folded-linenos': [],
        'sel-line': 52L,
        'sel-line-start': 1487L,
        'selection_end': 1502L,
        'selection_start': 1491L,
        'zoom': 0L},
                       loc('../DeepForest/keras_retinanet/bin/train.py'): {'a'\
        'ttrib-starts': [('parse_args',
                          371)],
        'first-line': 406L,
        'folded-linenos': [],
        'sel-line': 406L,
        'sel-line-start': 15687L,
        'selection_end': 15847L,
        'selection_start': 15687L,
        'zoom': 0L},
                       loc('../DeepForest/tests/test_preprocess.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/tests/test_utilities.py'): {'attri'\
        'b-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest_Model/GenerateAnchors.py'): {'attr'\
        'ib-starts': [('generate_pretraining',
                       14)],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 484L,
        'selection_end': 525L,
        'selection_start': 518L,
        'zoom': 0L},
                       loc('../DeepForest_Model/dask_utility.py'): {'attrib-'\
        'starts': [],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 64L,
        'selection_end': 105L,
        'selection_start': 105L,
        'zoom': 0L},
                       loc('../DeepForest_Model/generate.py'): {'attrib-star'\
        'ts': [],
        'first-line': 196L,
        'folded-linenos': [],
        'sel-line': 231L,
        'sel-line-start': 9973L,
        'selection_end': 9973L,
        'selection_start': 9973L,
        'zoom': 0L},
                       loc('SLURM/generate.sbatch'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 493L,
        'selection_end': 493L,
        'selection_start': 493L,
        'zoom': 0L},
                       loc('SLURM/predict.sbatch'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 521L,
        'selection_end': 537L,
        'selection_start': 528L,
        'zoom': 0L},
                       loc('SLURM/pytest.sbatch'): {'attrib-starts': [],
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 590L,
        'selection_end': 622L,
        'selection_start': 622L,
        'zoom': 0L},
                       loc('__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('dask_example.py'): {'attrib-starts': [],
        'first-line': 69L,
        'folded-linenos': [],
        'sel-line': 82L,
        'sel-line-start': 2611L,
        'selection_end': 2645L,
        'selection_start': 2645L,
        'zoom': 0L},
                       loc('dask_small.py'): {'attrib-starts': [('load_tenso'\
        'rflow',
        25)],
        'first-line': 20L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 653L,
        'selection_end': 826L,
        'selection_start': 653L,
        'zoom': 0L},
                       loc('environment.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 94L,
        'selection_end': 108L,
        'selection_start': 108L,
        'zoom': 0L},
                       loc('generate.py'): {'attrib-starts': [],
        'first-line': 17L,
        'folded-linenos': [],
        'sel-line': 22L,
        'sel-line-start': 658L,
        'selection_end': 711L,
        'selection_start': 696L,
        'zoom': 0L},
                       loc('generate_crops.py'): {'attrib-starts': [('genera'\
        'te_training',
        14)],
        'first-line': 88L,
        'folded-linenos': [],
        'sel-line': 68L,
        'sel-line-start': 2484L,
        'selection_end': 2559L,
        'selection_start': 2559L,
        'zoom': 0L},
                       loc('main.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 28L,
        'sel-line-start': 919L,
        'selection_end': 919L,
        'selection_start': 919L,
        'zoom': 0L},
                       loc('predict.py'): {'attrib-starts': [('predict_tile',
        103)],
        'first-line': 30L,
        'folded-linenos': [],
        'sel-line': 130L,
        'sel-line-start': 5376L,
        'selection_end': 5391L,
        'selection_start': 5391L,
        'zoom': 0L},
                       loc('scratch.py'): {'attrib-starts': [],
        'first-line': 18L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 936L,
        'selection_end': 965L,
        'selection_start': 965L,
        'zoom': 0L},
                       loc('start_cluster.py'): {'attrib-starts': [('GPU_clu'\
        'ster',
        61)],
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 83L,
        'sel-line-start': 2409L,
        'selection_end': 2441L,
        'selection_start': 2409L,
        'zoom': 0L},
                       loc('test_dask.py'): {'attrib-starts': [('add',
        23)],
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 443L,
        'selection_end': 459L,
        'selection_start': 459L,
        'zoom': 0L},
                       loc('test_start_cluster.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 139L,
        'selection_end': 210L,
        'selection_start': 180L,
        'zoom': 0L},
                       loc('tests/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_dask.py'): {'attrib-starts': [('test_'\
        'dask',
        25)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 40L,
        'sel-line-start': 824L,
        'selection_end': 824L,
        'selection_start': 824L,
        'zoom': 0L},
                       loc('tests/test_predict.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 183L,
        'selection_end': 216L,
        'selection_start': 216L,
        'zoom': 0L},
                       loc('tests/test_start_cluster.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 85L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_tfrecords.py'): {'attrib-starts': [('t'\
        'est_create_dataset',
        23)],
        'first-line': 16L,
        'folded-linenos': [],
        'sel-line': 26L,
        'sel-line-start': 712L,
        'selection_end': 734L,
        'selection_start': 734L,
        'zoom': 0L},
                       loc('tfrecords.py'): {'attrib-starts': [('create_tens'\
        'ors',
        111)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 113L,
        'sel-line-start': 3884L,
        'selection_end': 3888L,
        'selection_start': 3888L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/train.py'): {'a'\
        'ttrib-starts': [('create_models',
                          77)],
        'first-line': 115L,
        'folded-linenos': [],
        'sel-line': 107L,
        'sel-line-start': 4157L,
        'selection_end': 4204L,
        'selection_start': 4189L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/image.py'): {'a'\
        'ttrib-starts': [('preprocess_image',
                          35)],
        'first-line': 48L,
        'folded-linenos': [],
        'sel-line': 56L,
        'sel-line-start': 1845L,
        'selection_end': 1860L,
        'selection_start': 1860L,
        'zoom': 0L},
                       loc('../../Dropbox/Weecology/Drone/RP_2015_P1.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../Dropbox/Weecology/Drone/RP_2015_P6.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 131L,
        'selection_end': 154L,
        'selection_start': 154L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/PIL/Image.py'): {'a'\
        'ttrib-starts': [('open',
                          2769)],
        'first-line': 2803L,
        'folded-linenos': [],
        'sel-line': 2813L,
        'sel-line-start': 95395L,
        'selection_end': 95448L,
        'selection_start': 95395L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/_pytest/python.py'): {'a'\
        'ttrib-starts': [('Module',
                          419),
                         ('Module._importtestmodule',
                          487)],
        'first-line': 513L,
        'folded-linenos': [],
        'sel-line': 526L,
        'sel-line-start': 19577L,
        'selection_end': 19613L,
        'selection_start': 19613L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/fiona/collection.py'): {'a'\
        'ttrib-starts': [('Collection',
                          25),
                         ('Collection.__init__',
                          34)],
        'first-line': 51L,
        'folded-linenos': [],
        'sel-line': 66L,
        'sel-line-start': 2725L,
        'selection_end': 2725L,
        'selection_start': 2725L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/keras/engine/training_utils.py'): {'a'\
        'ttrib-starts': [('check_num_samples',
                          530)],
        'first-line': 559L,
        'folded-linenos': [],
        'sel-line': 570L,
        'sel-line-start': 23889L,
        'selection_end': 23889L,
        'selection_start': 23889L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          122),
                         ('NDFrame.__getattr__',
                          5161)],
        'first-line': 5168L,
        'folded-linenos': [],
        'sel-line': 5178L,
        'sel-line-start': 171370L,
        'selection_end': 171370L,
        'selection_start': 171370L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/tensorflow/python/client/session.py'): {'a'\
        'ttrib-starts': [('BaseSession',
                          620),
                         ('BaseSession._do_call',
                          1353)],
        'first-line': 1364L,
        'folded-linenos': [],
        'sel-line': 1369L,
        'sel-line-start': 52327L,
        'selection_end': 52327L,
        'selection_start': 52327L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/tensorflow/python/framework/ops.py'): {'a'\
        'ttrib-starts': [('Graph',
                          3001),
                         ('Graph._as_graph_element_locked',
                          3797)],
        'first-line': 3858L,
        'folded-linenos': [],
        'sel-line': 3874L,
        'sel-line-start': 139080L,
        'selection_end': 139080L,
        'selection_start': 139080L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/crowns/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'Image.open',
                         u'Image',
                         u'project',
                         u'gpus',
                         u'mnist',
                         u'print',
                         u'print_function',
                         u'.h5',
                         u'create_models',
                         u'predict_',
                         u'batch',
                         u'use_release',
                         u'create_model',
                         u'tf.',
                         u'non_max',
                         u'float',
                         u'empty',
                         u'emoty',
                         u'allow',
                         u'get']
testing.stored-results = (1,
                          [(u'/Users/ben/Documents/NEON_crown_maps/tests/test_tfrecords.py',
                            [('test_create_tfrecords',
                              0,
                              None,
                              None,
                              None,
                              1580223548,
                              19),
                             ('test_create_dataset',
                              0,
                              None,
                              None,
                              None,
                              1580223548,
                              23)]),
                           (u'/Users/ben/Documents/NEON_crown_maps/tests/test_predict.py',
                            [('test_predict_tilelist',
                              0,
                              None,
                              None,
                              None,
                              1580257663,
                              42),
                             ('test_predict_tile',
                              0,
                              None,
                              None,
                              None,
                              1580257663,
                              38)]),
                           (u'/Users/ben/Documents/NEON_crown_maps/tests/test_dask.py',
                            [('test_dask',
                              0,
                              None,
                              None,
                              None,
                              1580170653,
                              25)])],
                          {u'/Users/ben/Documents/NEON_crown_maps/test_dask.py': (u'Test process aborted: some tests were not run',
        1579123742)})
