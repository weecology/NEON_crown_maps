#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.err-values = {loc('../../../../Applications/WingIDE.app/Contents/Resources/src/testing/runners/run_pytest_xml.py'): {},
                    loc('shapefile_annotation.py'): {}}
debug.exceptions-ignored = {loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/_pytest/_code/code.py'): {209: True},
                            loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/_pytest/config/__init__.py'): {1130: True}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'NyVPHO0lKJlWFE6ZB7U3wBBhIF'\
        'xqemTE',
        'size-state': 'fullscreen',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.214845791949817,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(1,),
        (2,),
        (2,
         0),
        (3,)],
                                 'selected-nodes': [],
                                 'top-node': (1,
        2)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [2,
                          4],
        'notebook_display': 'normal',
        'notebook_percent': 0.5,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'weights',
                                       'fReverse': False,
                                       'fSearchText': u'load_model',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'source-lineno',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'weights',
                                       'fReverse': False,
                                       'fSearchText': u'Image.open',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 21578L,
                       'folded-linenos': [],
                       'history': {u'file:/Applications/WingIDE.app/Contents/Resources/src/testing/runners/run_pytest_xml.py': ['u'\
        'tm\n',
        'raster = rasterio.open(image_path)\n',
        'rasterio_window = rwindow.Window.from_slices(cols=crop_index[lowest'\
        '_index][0],rows=crop_index[lowest_index][0])\nout_profile = raster.'\
        'profile.copy()    \ncrop_filename = os.path.join(save_dir,"{}_{}.ti'\
        'f".format(image_name,lowest_index)) \nRP1_block = raster.read(windo'\
        'w=rasterio_window, masked=True)  \ndst.write(RP1_block, window=rast'\
        'erio_window)\ndst.close()\n\n',
        'rasterio_window = rwindow.Window.from_slices(cols=crop_index[lowest'\
        '_index][0],rows=crop_index[lowest_index][0])\nout_profile = raster.'\
        'profile.copy()    \ncrop_filename = os.path.join(save_dir,"{}_{}.ti'\
        'f".format(image_name,lowest_index)) \nRP1_block = raster.read(windo'\
        'w=rasterio_window, masked=True)  \ndst.write(RP1_block, window=rast'\
        'erio_window)\n\n',
        'rasterio_window = rwindow.Window.from_slices(cols=crop_index[lowest'\
        '_index][0],rows=crop_index[lowest_index][0])\n',
        'out_profile = raster.profile.copy()\n',
        'RP1_block = raster.read(window=rasterio_window, masked=True)\n',
        'dst.write(RP1_block, window=rasterio_window)\n',
        'crop_index[lowest_index]\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(cols=crop_index[lowest_index][0][0],rows=crop_index[lowest_ind"\
        "ex][0][1])\nout_profile = raster.profile.copy()    \ncrop_filename "\
        "= os.path.join(save_dir,\"{}_{}.tif\".format(image_name,lowest_inde"\
        "x)) \nwith  rasterio.open(crop_filename, 'w', **out_profile) as dst"\
        ":\n    RP1_block = raster.read(window=rasterio_window, masked=True)"\
        "  \n    dst.write(RP1_block, window=rasterio_window)\n\n",
        'crop_index[lowest_index][0]\n',
        'crop_index[lowest_index][1]\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(cols=crop_index[lowest_index][0],rows=crop_index[lowest_index]"\
        "[1])\nout_profile = raster.profile.copy()    \ncrop_filename = os.p"\
        "ath.join(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \n"\
        "with  rasterio.open(crop_filename, 'w', **out_profile) as dst:\n   "\
        " RP1_block = raster.read(window=rasterio_window, masked=True)  \n  "\
        "  dst.write(RP1_block, window=rasterio_window)\n\n",
        'crop_index\n',
        'rwindow.Window\n',
        'windows[499]\n',
        'windows\n',
        'scores\n',
        'scores[0]\n',
        'scores[19]\n',
        'scores[10]\n',
        'score_df.head()\n',
        'crop_index[index]\n',
        'index\n',
        'data[index] = filtered_boxes\n',
        'lowest_index    \n',
        'score_df.index\n',
        'score_df = pd.Series(scores)\n',
        'lowest = score_df.min()\n',
        'lowest_index = score_df[score_df == lowest].index[0]\n',
        'lowest_index\n',
        'worst_window = data[lowest_index]\n',
        'worst_window\n',
        'window = crop_index[lowest_index]\n',
        'window.indices()\n',
        'lowest\n',
        'print(index)\n#transform    \nxmin = (window_xmin * cell_size) + ut'\
        'm_xmin\nxmax = (window_xmin + width) * cell_size  + utm_xmin\nymin '\
        '= (window_ymin) * cell_size  + utm_ymin\nymax = (window_ymin + heig'\
        'ht) * cell_size  + utm_ymin\n\n',
        '#Spatial clip to window using spatial index for faster querying\npo'\
        'ssible_matches_index = list(spatial_index.intersection([xmin,ymin,x'\
        'max,ymax]))\npossible_matches = shp.iloc[possible_matches_index]\n'\
        '\n',
        'filtered_boxes = possible_matches.cx[xmin:xmax,ymin:ymax]\n',
        'filtered_boxes\n',
        'filtered_boxes.score\n',
        'from PIL import Image\n',
        'pil_image = Image.open(image_path)\n',
        'numpy_image = np.array(pil_image)\n',
        'crop = numpy_image[window.indices()]\n',
        'crop\n',
        'crop_filename = os.path.join(save_dir,"{}_{}.tif".format(image_name'\
        ',lowest_index))\n',
        'cv2.imwrite(crop_filename, crop)\n',
        "rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest"\
        "_index][0],cols=crop_index[lowest_index][1])\nout_profile = raster."\
        "profile.copy()    \ncrop_filename = os.path.join(save_dir,\"{}_{}.t"\
        "if\".format(image_name,lowest_index)) \nwith  rasterio.open(crop_fi"\
        "lename, 'w', **out_profile) as dst:\n    RP1_block = raster.read(wi"\
        "ndow=rasterio_window, masked=True)  \n    dst.write(RP1_block, wind"\
        "ow=rasterio_window)\n\n",
        'rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest'\
        '_index][0],cols=crop_index[lowest_index][1])\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w', **out_p"\
        "rofile) as dst:\n    RP1_block = raster.read(window=rasterio_window"\
        ", masked=True)  \n    dst.write(RP1_block, window=rasterio_window)"\
        "\n\n",
        "rasterio_window = rwindow.Window.from_slices(rows=-crop_index[lowes"\
        "t_index].indices()[0],cols=-crop_index[lowest_index].indices()[1])"\
        "\nout_profile = raster.profile.copy()    \ncrop_filename = os.path."\
        "join(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith"\
        "  rasterio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1"\
        "_block = raster.read(window=rasterio_window, masked=True)  \n    ds"\
        "t.write(RP1_block, window=rasterio_window)\n\n",
        'crop_index[lowest_index].indices()[0]\n',
        '-crop_index[lowest_index].indices()[0]\n',
        'crop_index[lowest_index].indices()\n',
        "rows = slice(-6460, -6860, None)\ncols = slice(-5440, -5840, None)"\
        "\nrasterio_window = rwindow.Window.from_slices(rows=rows,cols=cols)"\
        "\nout_profile = raster.profile.copy()    \ncrop_filename = os.path."\
        "join(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith"\
        "  rasterio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1"\
        "_block = raster.read(window=rasterio_window, masked=True)  \n    ds"\
        "t.write(RP1_block, window=rasterio_window)\n\n",
        "rows = slice(-6460, -6860, None)\ncols = slice(-5440, -5840, None)"\
        "\nrasterio_window = rwindow.Window.from_slices(rows=rows,cols=cols,"\
        "height=400)\nout_profile = raster.profile.copy()    \ncrop_filename"\
        " = os.path.join(save_dir,\"{}_{}.tif\".format(image_name,lowest_ind"\
        "ex)) \nwith  rasterio.open(crop_filename, 'w', **out_profile) as ds"\
        "t:\n    RP1_block = raster.read(window=rasterio_window, masked=True"\
        ")  \n    dst.write(RP1_block, window=rasterio_window)\n\n",
        "#save RGB windows to file\nrows = slice(-6460, -6860, None)\ncols ="\
        " slice(-5440, -5840, None)\nrasterio_window = rwindow.Window.from_s"\
        "lices(rows=rows,cols=cols,height=400,width=400)\nout_profile = rast"\
        "er.profile.copy()    \ncrop_filename = os.path.join(save_dir,\"{}_{"\
        "}.tif\".format(image_name,lowest_index)) \nwith  rasterio.open(crop"\
        "_filename, 'w', **out_profile) as dst:\n    RP1_block = raster.read"\
        "(window=rasterio_window, masked=True)  \n    dst.write(RP1_block, w"\
        "indow=rasterio_window)\n\n",
        'rows = slice(6460, 6860, None)\ncols = slice(-5440, -5840, None)\n'\
        'rasterio_window = rwindow.Window.from_slices(rows=rows,cols=cols,he'\
        'ight=400,width=400)\n\n',
        "out_profile = raster.profile.copy()    \ncrop_filename = os.path.jo"\
        "in(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith  "\
        "rasterio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1_b"\
        "lock = raster.read(window=rasterio_window, masked=True)  \n    dst."\
        "write(RP1_block, window=rasterio_window)\n    \n#Format annotations"\
        " frame\nshp_filename = os.path.join(save_dir,\"{}_{}.shp\".format(i"\
        "mage_name,lowest_index))    \nworst_window.to_file(shp_filename, dr"\
        "iver='ESRI Shapefile')\n\n",
        "rows = slice(6460, 6860, None)\ncols = slice(5440, 5840, None)\nras"\
        "terio_window = rwindow.Window.from_slices(rows=rows,cols=cols,heigh"\
        "t=400,width=400)\nout_profile = raster.profile.copy()    \ncrop_fil"\
        "ename = os.path.join(save_dir,\"{}_{}.tif\".format(image_name,lowes"\
        "t_index)) \nwith  rasterio.open(crop_filename, 'w', **out_profile) "\
        "as dst:\n    RP1_block = raster.read(window=rasterio_window, masked"\
        "=True)  \n    dst.write(RP1_block, window=rasterio_window)\n    \n"\
        "#Format annotations frame\nshp_filename = os.path.join(save_dir,\""\
        "{}_{}.shp\".format(image_name,lowest_index))    \nworst_window.to_f"\
        "ile(shp_filename, driver='ESRI Shapefile')\n\n",
        'window_xmin, window_ymin, width, height = window.getRect()\n',
        'window_xmin\n',
        'xmin = (window_xmin * cell_size) + utm_xmin\nxmax = (window_xmin + '\
        'width) * cell_size  + utm_xmin\nymin = (window_ymin) * cell_size  +'\
        ' utm_ymin\nymax = (window_ymin + height) * cell_size  + utm_ymin\n'\
        '\n',
        'utm_xmin\n',
        'utm_ymin\n',
        'raster.bounds\n',
        'xmin\n',
        'xmax\n',
        'ymin\n',
        'ymax\n',
        'window_ymin\n',
        'height\n',
        "worst_window = data[lowest_index]\n\n#save RGB windows to file\nras"\
        "terio_window = rwindow.Window.from_slices(rows=crop_index[lowest_in"\
        "dex].indices()[0],cols=crop_index[lowest_index].indices()[1])\nout_"\
        "profile = raster.profile.copy()    \ncrop_filename = os.path.join(s"\
        "ave_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith  rast"\
        "erio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1_block"\
        " = raster.read(window=rasterio_window, masked=False)  \n    dst.wri"\
        "te(RP1_block)\n\n",
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w') as dst:"\
        "\n    RP1_block = raster.read(window=rasterio_window, masked=True) "\
        " \n    dst.write(RP1_block)\n\n",
        'raster.crs\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',driver="\
        "\"GTiff\",crs=raster.crs) as dst:\n    RP1_block = raster.read(wind"\
        "ow=rasterio_window, masked=True)  \n    dst.write(RP1_block)\n\n",
        'RP1_block\n',
        'RP1_block.shape\n',
        "with  rasterio.open(crop_filename, 'w',driver=\"GTiff\",crs=raster."\
        "crs) as dst:\n    RP1_block = raster.read(window=rasterio_window, m"\
        "asked=True)  \n    dst.write(RP1_block)\n\n",
        'rasterio_window\n',
        'rasterio_window.width\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',driver="\
        "\"GTiff\",crs=raster.crs,width=rasterio_window.width,height=rasteri"\
        "o_window.height) as dst:\n    RP1_block = raster.read(window=raster"\
        "io_window, masked=True)  \n    dst.write(RP1_block)\n\n",
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',driver="\
        "\"GTiff\",count=3,crs=raster.crs,width=rasterio_window.width,height"\
        "=rasterio_window.height) as dst:\n    RP1_block = raster.read(windo"\
        "w=rasterio_window, masked=True)  \n    dst.write(RP1_block)\n\n",
        'out_profile.dtype\n',
        'out_profile[dtype]\n',
        'out_profile["dtype"]\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',dtype=ou"\
        "t_profile[\"dtype\"],\n                    driver=\"GTiff\",\n     "\
        "               count=3,\n                    crs=raster.crs,\n     "\
        "               width=rasterio_window.width,height=rasterio_window.h"\
        "eight) as dst:\n    RP1_block = raster.read(window=rasterio_window,"\
        " masked=True)  \n    dst.write(RP1_block)\n\n",
        'out_profile\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',dtype=ou"\
        "t_profile[\"dtype\"],\n                    driver=\"GTiff\",\n     "\
        "               count=3,\n                    crs=raster.crs,\n     "\
        "               width=rasterio_window.width,\n                    tr"\
        "ansform=out_profile[\"transform\"],\n                    height=ras"\
        "terio_window.height) as dst:\n    RP1_block = raster.read(window=ra"\
        "sterio_window, masked=True)  \n    dst.write(RP1_block)\n\n",
        'rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest'\
        '_index].indices()[0],cols=crop_index[lowest_index].indices()[1])\n',
        'out_image, out_transform = rasterio.mask.mask(raster, rasterio_wind'\
        'ow, crop=True)\n',
        'from rasterio import mas\n',
        'from rasterio import mask\n',
        'out_image, out_transform = mask.mask(raster, rasterio_window, crop='\
        'True)\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])    \ncrop_filename = os.path.join(save_dir"\
        ",\"{}_{}.tif\".format(image_name,lowest_index)) \nwith  rasterio.op"\
        "en(crop_filename, 'w',dtype=out_profile[\"dtype\"],\n              "\
        "      driver=\"GTiff\",\n                    count=3,\n            "\
        "        crs=raster.crs,\n                    width=rasterio_window."\
        "width,\n                    transform=rasterio_window.window_transf"\
        "orm,\n                    height=rasterio_window.height) as dst:\n"\
        "    RP1_block = raster.read(window=rasterio_window, masked=True)  "\
        "\n    dst.write(RP1_block)\n\n",
        'rwindow.transform(rasterio_window)\n',
        'rwindow.transform(rasterio_window,raster.window_transform)\n',
        'raster.window_transform(rasterio_window)\n',
        "with  rasterio.open(crop_filename, 'w',dtype=out_profile[\"dtype\""\
        "],\n                    driver=\"GTiff\",\n                    coun"\
        "t=3,\n                    crs=raster.crs,\n                    widt"\
        "h=rasterio_window.width,\n                    transform=raster.wind"\
        "ow_transform(rasterio_window),\n                    height=rasterio"\
        "_window.height) as dst:\n    RP1_block = raster.read(window=rasteri"\
        "o_window, masked=True)  \n    dst.write(RP1_block)\n\n"]},
                       'launch-id': None,
                       'sel-line': 21595L,
                       'sel-line-start': 1626196L,
                       'selection_end': 1626232L,
                       'selection_start': 1626232L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 0L,
                       'folded-linenos': [],
                       'history': {None: ['import geopandas\n',
        'import geopandas\ngp = geopandas.read_file("/Users/ben/Documents/NE'\
        'ON_crown_maps/tests/2018_BART_4_318000_4876000_image_490.shp")\n\n',
        'gp\n',
        'gp.geometry\n',
        'gp.geometry.box\n',
        'ra\n',
        'raise EnvironmentError("")\n',
        'raise EnvironmentError("Geopandas not installed")\n',
        'raise EnvironmentError("Geopandas not installed by default")\n',
        'raise EnvironmentError("Geopandas not installed by default, as it i'\
        's only used for this utility.")\n',
        'raise EnvironmentError("Geopandas not installed by default, as it i'\
        's only used for this utility. See geopandas installation: http://ge'\
        'opandas.org/install.html ")\n',
        'gp = gp.read_file("/Users/ben/Documents/NEON_crown_maps/tests/2018_'\
        'BART_4_318000_4876000_image_490.shp")\n',
        'import geopandas as gp\n',
        'gdf\n',
        '    gdf.geometry()\n',
        'gdf = gp.read_file("/Users/ben/Documents/NEON_crown_maps/tests/2018'\
        '_BART_4_318000_4876000_image_490.shp")\n',
        '    gdf.geometry\n',
        'gdf = gp.read_file("/Users/ben/Downloads/predictions/2016_WOOD_1_48'\
        '6000_5226000_image.shp")\n',
        '    gdf.geometry.bounds\n',
        '    gdf.geometry.bounds.head()\n',
        'df = gdf.geometry.bounds\n',
        'df.xmin\n',
        'df.columns\n',
        'import rasterio\n',
        'with rasterio.open(rgb) as src:\n    left, bottom, right, top = ras'\
        'ter.bounds\n\n',
        'rgb = "/Users/ben/Downloads/predictions/2018_BART_4_318000_4876000_'\
        'image.tif"\n',
        '#raster bounds\nwith rasterio.open(rgb) as src:\n    left, bottom, '\
        'right, top = raster.bounds\n\n',
        '#raster bounds\nwith rasterio.open(rgb) as src:\n    left, bottom, '\
        'right, top = src.bounds\n\n',
        'left - df.minx\n',
        'left\n',
        'df.\n',
        'shapefile = "/Users/ben/Downloads/predictions/2018_BART_4_318000_48'\
        '76000_image.shp"\nrgb = "/Users/ben/Downloads/predictions/2018_BART'\
        '_4_318000_4876000_image.tif"\n\n',
        'try:\n    import geopandas\nexcept:\n    raise EnvironmentError("Ge'\
        'opandas not installed by default, as it is only used for this utili'\
        'ty. See geopandas installation: http://geopandas.org/install.html "'\
        ')    \ngdf = gp.read_file(shapefile)\n\n#get coordinates\ndf = gdf.'\
        'geometry.bounds\n\n#raster bounds\nwith rasterio.open(rgb) as src:'\
        '\n    left, bottom, right, top = src.bounds\n    \n#Transform proje'\
        'ct coordinates to image coordinates\ndf.minx - left\n\n',
        'df.minx\n',
        'df.minx - left\n',
        '    df.maxx - left\n',
        'int(df.maxx - left)\n',
        'df["tile_xmin"] = df.minx - left\n',
        ' df["tile_xmin"] \n',
        'df["tile_xmin"].astype(int)\n',
        'df["tile_xmin"]\n',
        'df["tile_xmin"] = df["tile_xmin"].astype(int)\n',
        ' df["tile_xmin"]\n',
        'df["tile_xmax"] = df.maxx - left\ndf["tile_xmax"] = df["tile_xmax"]'\
        '.astype(int)\n\n',
        'top\n',
        'df.miny \n',
        'df.miny - bottom\n',
        'bottom\n',
        'import geopandas as gp\nimport rasterio\n\nshapefile = "/Users/ben/'\
        'Downloads/predictions/2018_BART_4_318000_4876000_image.shp"\nrgb = '\
        '"/Users/ben/Downloads/predictions/2018_BART_4_318000_4876000_image.'\
        'tif"\n\ntry:\n    import geopandas\nexcept:\n    raise EnvironmentE'\
        'rror("Geopandas not installed by default, as it is only used for th'\
        'is utility. See geopandas installation: http://geopandas.org/instal'\
        'l.html ")    \ngdf = gp.read_file(shapefile)\n\n#get coordinates\n'\
        'df = gdf.geometry.bounds\n\n#raster bounds\nwith rasterio.open(rgb)'\
        ' as src:\n    left, bottom, right, top = src.bounds\n    \n#Transfo'\
        'rm project coordinates to image coordinates\ndf["tile_xmin"] = df.m'\
        'inx - left\ndf["tile_xmin"] = df["tile_xmin"].astype(int)\n\ndf["ti'\
        'le_xmax"] = df.maxx - left\ndf["tile_xmax"] = df["tile_xmax"].astyp'\
        'e(int)\n\ndf["tile_ymin"] = df.miny - bottom\ndf["tile_ymin"] = df['\
        '"tile_ymin"].astype(int)\n\ndf["tile_ymax"] = df.maxy - bottom\ndf['\
        '"tile_ymax"] = df["tile_ymax"].astype(int)\n\n\n',
        'df["tile_ymin"] = top - df.miny \ndf["tile_ymin"] = df["tile_ymin"]'\
        '.astype(int)\n\ndf["tile_ymax"] = top - df.maxy\ndf["tile_ymax"] = '\
        'df["tile_ymax"].astype(int)\n\n',
        'gdf.columns.label\n',
        'gdf.label\n',
        'gdf.columns\n',
        'label in gdf.columns\n',
        '"label" in gdf.columns\n',
        'df["filename"] = rgb\n',
        'df[["image_path","tile_xmin","tile_ymin","tile_xmax","tile_ymax","l'\
        'abel"]]\n',
        'import geopandas as gp\nimport rasterio\n\nshapefile = "/Users/ben/'\
        'Downloads/predictions/2018_BART_4_318000_4876000_image.shp"\nrgb = '\
        '"/Users/ben/Downloads/predictions/2018_BART_4_318000_4876000_image.'\
        'tif"\n\ntry:\n    import geopandas\nexcept:\n    raise EnvironmentE'\
        'rror("Geopandas not installed by default, as it is only used for th'\
        'is utility. See geopandas installation: http://geopandas.org/instal'\
        'l.html ")    \ngdf = gp.read_file(shapefile)\n\n#get coordinates\n'\
        'df = gdf.geometry.bounds\n\n#raster bounds\nwith rasterio.open(rgb)'\
        ' as src:\n    left, bottom, right, top = src.bounds\n    \n#Transfo'\
        'rm project coordinates to image coordinates\ndf["tile_xmin"] = df.m'\
        'inx - left\ndf["tile_xmin"] = df["tile_xmin"].astype(int)\n\ndf["ti'\
        'le_xmax"] = df.maxx - left\ndf["tile_xmax"] = df["tile_xmax"].astyp'\
        'e(int)\n\n#UTM is given from the top, but origin of an image is top'\
        ' left\n\ndf["tile_ymin"] = top - df.miny \ndf["tile_ymin"] = df["ti'\
        'le_ymin"].astype(int)\n\ndf["tile_ymax"] = top - df.maxy\ndf["tile_'\
        'ymax"] = df["tile_ymax"].astype(int)    \n\n#Add labels is they exi'\
        'st\nif "label" in gpd.columns:\n    df["label"] = gpd["label"]\nels'\
        'e:\n    df["label"] = "Tree"\n\n#add filename\ndf["image_path"] = r'\
        'gb\n\n#select columns\ndf[["image_path","tile_xmin","tile_ymin","ti'\
        'le_xmax","tile_ymax","label"]]\n\n\n',
        '#Add labels is they exist\nif "label" in gdf.columns:\n    df["labe'\
        'l"] = gdf["label"]\nelse:\n    df["label"] = "Tree"\n\n#add filenam'\
        'e\ndf["image_path"] = rgb\n\n#select columns\ndf[["image_path","til'\
        'e_xmin","tile_ymin","tile_xmax","tile_ymax","label"]]\n\n',
        'df.head()\n',
        'result = df[["image_path","tile_xmin","tile_ymin","tile_xmax","tile'\
        '_ymax","label"]]\n',
        'result.rename(columns={"tile_xmin":"xmin"})\n',
        'result = result.rename(columns={"tile_xmin":"xmin","tile_ymin":"ymi'\
        'n","tile_xmax":"xmax","tile_ymax":"ymax"})\n',
        'result.head()\n',
        'import os\nfrom deepforest import deepforest\nfrom deepforest impor'\
        't utilities\nfrom deepforest import preprocess\n\n#convert hand ann'\
        'otations from xml into retinanet format\nYELL_xml = utilities.get_d'\
        'ata("2019_YELL_2_528000_4978000_image_crop2.xml")\nannotation = uti'\
        'lities.xml_to_annotations(YELL_xml)\nannotation.head()\n\n',
        'import os\n',
        'os.getcwd()\n']},
                       'launch-id': None,
                       'sel-line': 8L,
                       'sel-line-start': 420L,
                       'selection_end': 420L,
                       'selection_start': 420L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py'),
        {'attrib-starts': [('NDFrame',
                            122),
                           ('NDFrame.__getattr__',
                            5161)],
         'first-line': 5167L,
         'folded-linenos': [],
         'sel-line': 5178L,
         'sel-line-start': 171370L,
         'selection_end': 171370L,
         'selection_start': 171370L,
         'zoom': 0L},
        1580503327.053288],
        [loc('shapefile_annotation.py'),
         {'attrib-starts': [('shapefile_annotations',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 17L,
          'sel-line-start': 596L,
          'selection_end': 612L,
          'selection_start': 612L,
          'zoom': 0L},
         1580503327.962836],
        [loc('utils/tfrecords.py'),
         {'attrib-starts': [('create_tfrecords',
                             26)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 39L,
          'sel-line-start': 1311L,
          'selection_end': 1329L,
          'selection_start': 1329L,
          'zoom': 0L},
         1580503338.425602],
        [loc('shapefile_annotation.py'),
         {'attrib-starts': [('shapefile_annotations',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 17L,
          'sel-line-start': 596L,
          'selection_end': 612L,
          'selection_start': 612L,
          'zoom': 0L},
         1580503339.498383],
        [loc('SLURM/predict.sbatch'),
         {'attrib-starts': [],
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 12L,
          'sel-line-start': 521L,
          'selection_end': 537L,
          'selection_start': 537L,
          'zoom': 0L},
         1580503341.782258],
        [loc('shapefile_annotation.py'),
         {'attrib-starts': [('shapefile_annotations',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 17L,
          'sel-line-start': 596L,
          'selection_end': 612L,
          'selection_start': 612L,
          'zoom': 0L},
         1580503342.974495],
        [loc('SLURM/generate.sbatch'),
         {'attrib-starts': [],
          'first-line': 2L,
          'folded-linenos': [],
          'sel-line': 14L,
          'sel-line-start': 525L,
          'selection_end': 590L,
          'selection_start': 525L,
          'zoom': 0L},
         1580503344.064136],
        [loc('shapefile_annotation.py'),
         {'attrib-starts': [('shapefile_annotations',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 17L,
          'sel-line-start': 596L,
          'selection_end': 612L,
          'selection_start': 612L,
          'zoom': 0L},
         1580503347.223342],
        [loc('SLURM/test.sbatch'),
         {'attrib-starts': [],
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 19L,
          'sel-line-start': 541L,
          'selection_end': 560L,
          'selection_start': 558L,
          'zoom': 0L},
         1580503348.902407],
        [loc('shapefile_annotation.py'),
         {'attrib-starts': [('shapefile_annotations',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 17L,
          'sel-line-start': 596L,
          'selection_end': 612L,
          'selection_start': 612L,
          'zoom': 0L},
         1580503351.967065],
        [loc('tests/test_hard_mining.py'),
         {'attrib-starts': [('test_run',
                             3)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 6L,
          'sel-line-start': 254L,
          'selection_end': 254L,
          'selection_start': 254L,
          'zoom': 0L},
         1580503353.052523],
        [loc('hard_mining.py'),
         {'attrib-starts': [('run',
                             14)],
          'first-line': 2L,
          'folded-linenos': [],
          'sel-line': 26L,
          'sel-line-start': 746L,
          'selection_end': 791L,
          'selection_start': 746L,
          'zoom': 0L},
         1580503359.989856],
        [loc('shapefile_annotation.py'),
         {'attrib-starts': [('shapefile_annotations',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 14L,
          'sel-line-start': 526L,
          'selection_end': 555L,
          'selection_start': 526L,
          'zoom': 0L},
         1580503898.582051],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             122),
                            ('NDFrame.__getattr__',
                             5161)],
          'first-line': 5167L,
          'folded-linenos': [],
          'sel-line': 5178L,
          'sel-line-start': 171370L,
          'selection_end': 171370L,
          'selection_start': 171370L,
          'zoom': 0L},
         1580503905.49847],
        [loc('shapefile_annotation.py'),
         {'attrib-starts': [('shapefile_annotations',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 745L,
          'selection_end': 769L,
          'selection_start': 745L,
          'zoom': 0L},
         1580504123.227529],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/series.py'),
         {'attrib-starts': [('_coerce_method',
                             122),
                            ('_coerce_method.wrapper',
                             127)],
          'first-line': 105L,
          'folded-linenos': [],
          'sel-line': 130L,
          'sel-line-start': 3540L,
          'selection_end': 3540L,
          'selection_start': 3540L,
          'zoom': 0L},
         1580504126.812327],
        [loc('shapefile_annotation.py'),
         {'attrib-starts': [('shapefile_annotations',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 763L,
          'selection_end': 799L,
          'selection_start': 763L,
          'zoom': 0L},
         1580504182.329705],
        [loc('../NeonTreeEvaluation/annotations/2018_OSBS_4_405000_3286000_image.xml'),
         {'attrib-starts': [],
          'first-line': 52L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 0L,
          'selection_start': 0L,
          'zoom': 0L},
         1580504187.960935],
        [loc('shapefile_annotation.py'),
         {'attrib-starts': [],
          'first-line': 19L,
          'folded-linenos': [],
          'sel-line': 44L,
          'sel-line-start': 1184L,
          'selection_end': 1258L,
          'selection_start': 1184L,
          'zoom': 0L},
         1580505357.2807],
        [loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/indexing.py'),
         {'attrib-starts': [('_NDFrameIndexer',
                             101),
                            ('_NDFrameIndexer._validate_read_indexer',
                             1137)],
          'first-line': 1112L,
          'folded-linenos': [],
          'sel-line': 1137L,
          'sel-line-start': 40987L,
          'selection_end': 40987L,
          'selection_start': 40987L,
          'zoom': 0L},
         1580505361.557036]],
        20),
        'current-loc': loc('shapefile_annotation.py'),
        'editor-state-list': [(loc('dask_example.py'),
                               {'attrib-starts': [('available',
        29)],
                                'first-line': 33L,
                                'folded-linenos': [],
                                'sel-line': 36L,
                                'sel-line-start': 931L,
                                'selection_end': 935L,
                                'selection_start': 935L,
                                'zoom': 0L}),
                              (loc('available.py'),
                               {'attrib-starts': [('available',
        1)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 5L,
                                'sel-line-start': 99L,
                                'selection_end': 112L,
                                'selection_start': 112L,
                                'zoom': 0L}),
                              (loc('main.py'),
                               {'attrib-starts': [('run',
        5)],
                                'first-line': 17L,
                                'folded-linenos': [],
                                'sel-line': 18L,
                                'sel-line-start': 543L,
                                'selection_end': 547L,
                                'selection_start': 547L,
                                'zoom': 0L}),
                              (loc('predict.py'),
                               {'attrib-starts': [('parse_prediction',
        76)],
                                'first-line': 69L,
                                'folded-linenos': [],
                                'sel-line': 79L,
                                'sel-line-start': 3401L,
                                'selection_end': 3424L,
                                'selection_start': 3419L,
                                'zoom': 0L}),
                              (loc('hard_mining.py'),
                               {'attrib-starts': [('run',
        14)],
                                'first-line': 2L,
                                'folded-linenos': [],
                                'sel-line': 26L,
                                'sel-line-start': 746L,
                                'selection_end': 791L,
                                'selection_start': 746L,
                                'zoom': 0L}),
                              (loc('tests/test_hard_mining.py'),
                               {'attrib-starts': [('test_run',
        3)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 6L,
                                'sel-line-start': 254L,
                                'selection_end': 254L,
                                'selection_start': 254L,
                                'zoom': 0L}),
                              (loc('shapefile_annotation.py'),
                               {'attrib-starts': [('shapefile_to_annotations',
        4)],
                                'first-line': 26L,
                                'folded-linenos': [],
                                'sel-line': 43L,
                                'sel-line-start': 1455L,
                                'selection_end': 1459L,
                                'selection_start': 1459L,
                                'zoom': 0L}),
                              (loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/indexing.py'),
                               {'attrib-starts': [('_NDFrameIndexer',
        101),
        ('_NDFrameIndexer._validate_read_indexer',
         1137)],
                                'first-line': 1112L,
                                'folded-linenos': [],
                                'sel-line': 1137L,
                                'sel-line-start': 40987L,
                                'selection_end': 40987L,
                                'selection_start': 40987L,
                                'zoom': 0L})],
        'has-focus': False,
        'locked': False},
        [loc('dask_example.py'),
         loc('available.py'),
         loc('main.py'),
         loc('predict.py'),
         loc('hard_mining.py'),
         loc('tests/test_hard_mining.py'),
         loc('shapefile_annotation.py'),
         loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/indexing.py')]),
                               'open_files': [u'available.py',
        u'dask_example.py',
        u'hard_mining.py',
        u'main.py',
        u'predict.py',
        u'../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/indexing.py',
        u'tests/test_hard_mining.py',
        u'shapefile_annotation.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.2736784140969163},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (1440,
                         0,
                         1920,
                         1080)}]}
guimgr.recent-documents = [loc('shapefile_annotation.py'),
                           loc('tests/test_hard_mining.py'),
                           loc('predict.py')]
guimgr.visual-state = {loc('../DeepForest/.travis.yml'): {'attrib-starts': [],
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 186L,
        'selection_end': 233L,
        'selection_start': 233L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/deepforest.py'): {'attr'\
        'ib-starts': [],
        'first-line': 115L,
        'folded-linenos': [],
        'sel-line': 30L,
        'sel-line-start': 956L,
        'selection_end': 1007L,
        'selection_start': 994L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/predict.py'): {'attrib-'\
        'starts': [('predict_image',
                    22)],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 82L,
        'sel-line-start': 3281L,
        'selection_end': 3298L,
        'selection_start': 3298L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/preprocess.py'): {'attr'\
        'ib-starts': [('split_raster',
                       115)],
        'first-line': 150L,
        'folded-linenos': [],
        'sel-line': 161L,
        'sel-line-start': 6779L,
        'selection_end': 6796L,
        'selection_start': 6787L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/retinanet_train.py'): {'a'\
        'ttrib-starts': [('create_generators',
                          179)],
        'first-line': 207L,
        'folded-linenos': [],
        'sel-line': 220L,
        'sel-line-start': 8520L,
        'selection_end': 8544L,
        'selection_start': 8537L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/tfrecords.py'): {'attri'\
        'b-starts': [('_parse_fn',
                      164)],
        'first-line': 162L,
        'folded-linenos': [],
        'sel-line': 167L,
        'sel-line-start': 7432L,
        'selection_end': 7448L,
        'selection_start': 7448L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/utilities.py'): {'attri'\
        'b-starts': [('use_release',
                      52)],
        'first-line': 80L,
        'folded-linenos': [],
        'sel-line': 52L,
        'sel-line-start': 1487L,
        'selection_end': 1502L,
        'selection_start': 1491L,
        'zoom': 0L},
                       loc('../DeepForest/keras_retinanet/bin/train.py'): {'a'\
        'ttrib-starts': [('parse_args',
                          371)],
        'first-line': 406L,
        'folded-linenos': [],
        'sel-line': 406L,
        'sel-line-start': 15687L,
        'selection_end': 15847L,
        'selection_start': 15687L,
        'zoom': 0L},
                       loc('../DeepForest/tests/test_preprocess.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/tests/test_utilities.py'): {'attri'\
        'b-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest_Model/GenerateAnchors.py'): {'attr'\
        'ib-starts': [('generate_pretraining',
                       14)],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 484L,
        'selection_end': 525L,
        'selection_start': 518L,
        'zoom': 0L},
                       loc('../DeepForest_Model/dask_utility.py'): {'attrib-'\
        'starts': [],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 64L,
        'selection_end': 105L,
        'selection_start': 105L,
        'zoom': 0L},
                       loc('../DeepForest_Model/generate.py'): {'attrib-star'\
        'ts': [],
        'first-line': 196L,
        'folded-linenos': [],
        'sel-line': 231L,
        'sel-line-start': 9973L,
        'selection_end': 9973L,
        'selection_start': 9973L,
        'zoom': 0L},
                       loc('SLURM/generate.sbatch'): {'attrib-starts': [],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 525L,
        'selection_end': 590L,
        'selection_start': 525L,
        'zoom': 0L},
                       loc('SLURM/predict.sbatch'): {'attrib-starts': [],
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 521L,
        'selection_end': 537L,
        'selection_start': 537L,
        'zoom': 0L},
                       loc('SLURM/pytest.sbatch'): {'attrib-starts': [],
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 590L,
        'selection_end': 622L,
        'selection_start': 622L,
        'zoom': 0L},
                       loc('SLURM/test.sbatch'): {'attrib-starts': [],
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 19L,
        'sel-line-start': 541L,
        'selection_end': 560L,
        'selection_start': 558L,
        'zoom': 0L},
                       loc('__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('dask_example.py'): {'attrib-starts': [],
        'first-line': 69L,
        'folded-linenos': [],
        'sel-line': 82L,
        'sel-line-start': 2611L,
        'selection_end': 2645L,
        'selection_start': 2645L,
        'zoom': 0L},
                       loc('dask_small.py'): {'attrib-starts': [('load_tenso'\
        'rflow',
        25)],
        'first-line': 20L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 653L,
        'selection_end': 826L,
        'selection_start': 653L,
        'zoom': 0L},
                       loc('environment.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 94L,
        'selection_end': 108L,
        'selection_start': 108L,
        'zoom': 0L},
                       loc('generate.py'): {'attrib-starts': [],
        'first-line': 17L,
        'folded-linenos': [],
        'sel-line': 22L,
        'sel-line-start': 658L,
        'selection_end': 711L,
        'selection_start': 696L,
        'zoom': 0L},
                       loc('generate_crops.py'): {'attrib-starts': [('genera'\
        'te_training',
        14)],
        'first-line': 88L,
        'folded-linenos': [],
        'sel-line': 68L,
        'sel-line-start': 2484L,
        'selection_end': 2559L,
        'selection_start': 2559L,
        'zoom': 0L},
                       loc('main.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 28L,
        'sel-line-start': 919L,
        'selection_end': 919L,
        'selection_start': 919L,
        'zoom': 0L},
                       loc('predict.py'): {'attrib-starts': [('predict_tile',
        103)],
        'first-line': 30L,
        'folded-linenos': [],
        'sel-line': 130L,
        'sel-line-start': 5376L,
        'selection_end': 5391L,
        'selection_start': 5391L,
        'zoom': 0L},
                       loc('scratch.py'): {'attrib-starts': [],
        'first-line': 18L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 936L,
        'selection_end': 965L,
        'selection_start': 965L,
        'zoom': 0L},
                       loc('start_cluster.py'): {'attrib-starts': [('GPU_clu'\
        'ster',
        61)],
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 83L,
        'sel-line-start': 2409L,
        'selection_end': 2441L,
        'selection_start': 2409L,
        'zoom': 0L},
                       loc('test_dask.py'): {'attrib-starts': [('add',
        23)],
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 443L,
        'selection_end': 459L,
        'selection_start': 459L,
        'zoom': 0L},
                       loc('test_start_cluster.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 139L,
        'selection_end': 210L,
        'selection_start': 180L,
        'zoom': 0L},
                       loc('tests/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_dask.py'): {'attrib-starts': [('test_'\
        'dask',
        25)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 40L,
        'sel-line-start': 824L,
        'selection_end': 824L,
        'selection_start': 824L,
        'zoom': 0L},
                       loc('tests/test_predict.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 183L,
        'selection_end': 216L,
        'selection_start': 216L,
        'zoom': 0L},
                       loc('tests/test_start_cluster.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 85L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_tfrecords.py'): {'attrib-starts': [('t'\
        'est_create_dataset',
        23)],
        'first-line': 16L,
        'folded-linenos': [],
        'sel-line': 26L,
        'sel-line-start': 712L,
        'selection_end': 734L,
        'selection_start': 734L,
        'zoom': 0L},
                       loc('tfrecords.py'): {'attrib-starts': [('create_tens'\
        'ors',
        111)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 113L,
        'sel-line-start': 3884L,
        'selection_end': 3888L,
        'selection_start': 3888L,
        'zoom': 0L},
                       loc('utils/tfrecords.py'): {'attrib-starts': [('creat'\
        'e_tfrecords',
        26)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 39L,
        'sel-line-start': 1311L,
        'selection_end': 1329L,
        'selection_start': 1329L,
        'zoom': 0L},
                       loc('../NeonTreeEvaluation/annotations/2018_OSBS_4_405000_3286000_image.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/train.py'): {'a'\
        'ttrib-starts': [('create_models',
                          77)],
        'first-line': 115L,
        'folded-linenos': [],
        'sel-line': 107L,
        'sel-line-start': 4157L,
        'selection_end': 4204L,
        'selection_start': 4189L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/image.py'): {'a'\
        'ttrib-starts': [('preprocess_image',
                          35)],
        'first-line': 48L,
        'folded-linenos': [],
        'sel-line': 56L,
        'sel-line-start': 1845L,
        'selection_end': 1860L,
        'selection_start': 1860L,
        'zoom': 0L},
                       loc('../../Dropbox/Weecology/Drone/RP_2015_P1.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../Dropbox/Weecology/Drone/RP_2015_P6.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 131L,
        'selection_end': 154L,
        'selection_start': 154L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/PIL/Image.py'): {'a'\
        'ttrib-starts': [('open',
                          2769)],
        'first-line': 2803L,
        'folded-linenos': [],
        'sel-line': 2813L,
        'sel-line-start': 95395L,
        'selection_end': 95448L,
        'selection_start': 95395L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/_pytest/python.py'): {'a'\
        'ttrib-starts': [('Module',
                          419),
                         ('Module._importtestmodule',
                          487)],
        'first-line': 513L,
        'folded-linenos': [],
        'sel-line': 526L,
        'sel-line-start': 19577L,
        'selection_end': 19613L,
        'selection_start': 19613L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/fiona/collection.py'): {'a'\
        'ttrib-starts': [('Collection',
                          25),
                         ('Collection.__init__',
                          34)],
        'first-line': 51L,
        'folded-linenos': [],
        'sel-line': 66L,
        'sel-line-start': 2725L,
        'selection_end': 2725L,
        'selection_start': 2725L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/keras/engine/training_utils.py'): {'a'\
        'ttrib-starts': [('check_num_samples',
                          530)],
        'first-line': 559L,
        'folded-linenos': [],
        'sel-line': 570L,
        'sel-line-start': 23889L,
        'selection_end': 23889L,
        'selection_start': 23889L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          122),
                         ('NDFrame.__getattr__',
                          5161)],
        'first-line': 5167L,
        'folded-linenos': [],
        'sel-line': 5178L,
        'sel-line-start': 171370L,
        'selection_end': 171370L,
        'selection_start': 171370L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/tensorflow/python/client/session.py'): {'a'\
        'ttrib-starts': [('BaseSession',
                          620),
                         ('BaseSession._do_call',
                          1353)],
        'first-line': 1364L,
        'folded-linenos': [],
        'sel-line': 1369L,
        'sel-line-start': 52327L,
        'selection_end': 52327L,
        'selection_start': 52327L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/tensorflow/python/framework/ops.py'): {'a'\
        'ttrib-starts': [('Graph',
                          3001),
                         ('Graph._as_graph_element_locked',
                          3797)],
        'first-line': 3858L,
        'folded-linenos': [],
        'sel-line': 3874L,
        'sel-line-start': 139080L,
        'selection_end': 139080L,
        'selection_start': 139080L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/crowns/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'Image.open',
                         u'Image',
                         u'project',
                         u'gpus',
                         u'mnist',
                         u'print',
                         u'print_function',
                         u'.h5',
                         u'create_models',
                         u'predict_',
                         u'batch',
                         u'use_release',
                         u'create_model',
                         u'tf.',
                         u'non_max',
                         u'float',
                         u'empty',
                         u'emoty',
                         u'allow',
                         u'get']
testing.stored-results = (1,
                          [(u'/Users/ben/Documents/NEON_crown_maps/tests/test_tfrecords.py',
                            [('test_create_dataset',
                              0,
                              None,
                              None,
                              None,
                              1580223548,
                              23),
                             ('test_create_tfrecords',
                              0,
                              None,
                              None,
                              None,
                              1580223548,
                              19)]),
                           (u'/Users/ben/Documents/NEON_crown_maps/tests/test_predict.py',
                            [('test_predict_tilelist',
                              0,
                              None,
                              None,
                              None,
                              1580257663,
                              42),
                             ('test_predict_tile',
                              0,
                              None,
                              None,
                              None,
                              1580257663,
                              38)]),
                           (u'/Users/ben/Documents/NEON_crown_maps/tests/test_dask.py',
                            [('test_dask',
                              0,
                              None,
                              None,
                              None,
                              1580170653,
                              25)])],
                          {u'/Users/ben/Documents/NEON_crown_maps/test_dask.py': (u'Test process aborted: some tests were not run',
        1579123742)})
