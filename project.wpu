#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.err-values = {loc('../../../../Applications/WingIDE.app/Contents/Resources/src/testing/runners/run_pytest_xml.py'): {},
                    loc('shapefile_annotation.py'): {}}
debug.exceptions-ignored = {loc('../../miniconda3/envs/test/lib/python3.7/site-packages/_pytest/_code/code.py'): {210: True},
                            loc('../../miniconda3/envs/test/lib/python3.7/site-packages/_pytest/config/__init__.py'): {1131: True}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'NyVPHO0lKJlWFE6ZB7U3wBBhIF'\
        'xqemTE',
        'size-state': 'fullscreen',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.214845791949817,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(0,),
        (1,),
        (2,),
        (2,
         0)],
                                 'selected-nodes': [(2,
        0)],
                                 'top-node': (1,
        3)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [4,
                          1],
        'notebook_display': 'normal',
        'notebook_percent': 0.5,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'weights',
                                       'fReverse': False,
                                       'fSearchText': u'load_model',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'source-lineno',
                       'tree-state': {'expanded-nodes': [(0,),
        (2,),
        (2,
         0)],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'weights',
                                       'fReverse': False,
                                       'fSearchText': u'indice',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 1216L,
                       'folded-linenos': [],
                       'history': {u'file:/Applications/WingIDE.app/Contents/Resources/src/testing/runners/run_pytest_xml.py': ['u'\
        'tm\n',
        'raster = rasterio.open(image_path)\n',
        'rasterio_window = rwindow.Window.from_slices(cols=crop_index[lowest'\
        '_index][0],rows=crop_index[lowest_index][0])\nout_profile = raster.'\
        'profile.copy()    \ncrop_filename = os.path.join(save_dir,"{}_{}.ti'\
        'f".format(image_name,lowest_index)) \nRP1_block = raster.read(windo'\
        'w=rasterio_window, masked=True)  \ndst.write(RP1_block, window=rast'\
        'erio_window)\ndst.close()\n\n',
        'rasterio_window = rwindow.Window.from_slices(cols=crop_index[lowest'\
        '_index][0],rows=crop_index[lowest_index][0])\nout_profile = raster.'\
        'profile.copy()    \ncrop_filename = os.path.join(save_dir,"{}_{}.ti'\
        'f".format(image_name,lowest_index)) \nRP1_block = raster.read(windo'\
        'w=rasterio_window, masked=True)  \ndst.write(RP1_block, window=rast'\
        'erio_window)\n\n',
        'rasterio_window = rwindow.Window.from_slices(cols=crop_index[lowest'\
        '_index][0],rows=crop_index[lowest_index][0])\n',
        'out_profile = raster.profile.copy()\n',
        'RP1_block = raster.read(window=rasterio_window, masked=True)\n',
        'dst.write(RP1_block, window=rasterio_window)\n',
        'crop_index[lowest_index]\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(cols=crop_index[lowest_index][0][0],rows=crop_index[lowest_ind"\
        "ex][0][1])\nout_profile = raster.profile.copy()    \ncrop_filename "\
        "= os.path.join(save_dir,\"{}_{}.tif\".format(image_name,lowest_inde"\
        "x)) \nwith  rasterio.open(crop_filename, 'w', **out_profile) as dst"\
        ":\n    RP1_block = raster.read(window=rasterio_window, masked=True)"\
        "  \n    dst.write(RP1_block, window=rasterio_window)\n\n",
        'crop_index[lowest_index][0]\n',
        'crop_index[lowest_index][1]\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(cols=crop_index[lowest_index][0],rows=crop_index[lowest_index]"\
        "[1])\nout_profile = raster.profile.copy()    \ncrop_filename = os.p"\
        "ath.join(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \n"\
        "with  rasterio.open(crop_filename, 'w', **out_profile) as dst:\n   "\
        " RP1_block = raster.read(window=rasterio_window, masked=True)  \n  "\
        "  dst.write(RP1_block, window=rasterio_window)\n\n",
        'crop_index\n',
        'rwindow.Window\n',
        'windows[499]\n',
        'windows\n',
        'scores\n',
        'scores[0]\n',
        'scores[19]\n',
        'scores[10]\n',
        'score_df.head()\n',
        'crop_index[index]\n',
        'index\n',
        'data[index] = filtered_boxes\n',
        'lowest_index    \n',
        'score_df.index\n',
        'score_df = pd.Series(scores)\n',
        'lowest = score_df.min()\n',
        'lowest_index = score_df[score_df == lowest].index[0]\n',
        'lowest_index\n',
        'worst_window = data[lowest_index]\n',
        'worst_window\n',
        'window = crop_index[lowest_index]\n',
        'window.indices()\n',
        'lowest\n',
        'print(index)\n#transform    \nxmin = (window_xmin * cell_size) + ut'\
        'm_xmin\nxmax = (window_xmin + width) * cell_size  + utm_xmin\nymin '\
        '= (window_ymin) * cell_size  + utm_ymin\nymax = (window_ymin + heig'\
        'ht) * cell_size  + utm_ymin\n\n',
        '#Spatial clip to window using spatial index for faster querying\npo'\
        'ssible_matches_index = list(spatial_index.intersection([xmin,ymin,x'\
        'max,ymax]))\npossible_matches = shp.iloc[possible_matches_index]\n'\
        '\n',
        'filtered_boxes = possible_matches.cx[xmin:xmax,ymin:ymax]\n',
        'filtered_boxes\n',
        'filtered_boxes.score\n',
        'from PIL import Image\n',
        'pil_image = Image.open(image_path)\n',
        'numpy_image = np.array(pil_image)\n',
        'crop = numpy_image[window.indices()]\n',
        'crop\n',
        'crop_filename = os.path.join(save_dir,"{}_{}.tif".format(image_name'\
        ',lowest_index))\n',
        'cv2.imwrite(crop_filename, crop)\n',
        "rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest"\
        "_index][0],cols=crop_index[lowest_index][1])\nout_profile = raster."\
        "profile.copy()    \ncrop_filename = os.path.join(save_dir,\"{}_{}.t"\
        "if\".format(image_name,lowest_index)) \nwith  rasterio.open(crop_fi"\
        "lename, 'w', **out_profile) as dst:\n    RP1_block = raster.read(wi"\
        "ndow=rasterio_window, masked=True)  \n    dst.write(RP1_block, wind"\
        "ow=rasterio_window)\n\n",
        'rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest'\
        '_index][0],cols=crop_index[lowest_index][1])\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w', **out_p"\
        "rofile) as dst:\n    RP1_block = raster.read(window=rasterio_window"\
        ", masked=True)  \n    dst.write(RP1_block, window=rasterio_window)"\
        "\n\n",
        "rasterio_window = rwindow.Window.from_slices(rows=-crop_index[lowes"\
        "t_index].indices()[0],cols=-crop_index[lowest_index].indices()[1])"\
        "\nout_profile = raster.profile.copy()    \ncrop_filename = os.path."\
        "join(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith"\
        "  rasterio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1"\
        "_block = raster.read(window=rasterio_window, masked=True)  \n    ds"\
        "t.write(RP1_block, window=rasterio_window)\n\n",
        'crop_index[lowest_index].indices()[0]\n',
        '-crop_index[lowest_index].indices()[0]\n',
        'crop_index[lowest_index].indices()\n',
        "rows = slice(-6460, -6860, None)\ncols = slice(-5440, -5840, None)"\
        "\nrasterio_window = rwindow.Window.from_slices(rows=rows,cols=cols)"\
        "\nout_profile = raster.profile.copy()    \ncrop_filename = os.path."\
        "join(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith"\
        "  rasterio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1"\
        "_block = raster.read(window=rasterio_window, masked=True)  \n    ds"\
        "t.write(RP1_block, window=rasterio_window)\n\n",
        "rows = slice(-6460, -6860, None)\ncols = slice(-5440, -5840, None)"\
        "\nrasterio_window = rwindow.Window.from_slices(rows=rows,cols=cols,"\
        "height=400)\nout_profile = raster.profile.copy()    \ncrop_filename"\
        " = os.path.join(save_dir,\"{}_{}.tif\".format(image_name,lowest_ind"\
        "ex)) \nwith  rasterio.open(crop_filename, 'w', **out_profile) as ds"\
        "t:\n    RP1_block = raster.read(window=rasterio_window, masked=True"\
        ")  \n    dst.write(RP1_block, window=rasterio_window)\n\n",
        "#save RGB windows to file\nrows = slice(-6460, -6860, None)\ncols ="\
        " slice(-5440, -5840, None)\nrasterio_window = rwindow.Window.from_s"\
        "lices(rows=rows,cols=cols,height=400,width=400)\nout_profile = rast"\
        "er.profile.copy()    \ncrop_filename = os.path.join(save_dir,\"{}_{"\
        "}.tif\".format(image_name,lowest_index)) \nwith  rasterio.open(crop"\
        "_filename, 'w', **out_profile) as dst:\n    RP1_block = raster.read"\
        "(window=rasterio_window, masked=True)  \n    dst.write(RP1_block, w"\
        "indow=rasterio_window)\n\n",
        'rows = slice(6460, 6860, None)\ncols = slice(-5440, -5840, None)\n'\
        'rasterio_window = rwindow.Window.from_slices(rows=rows,cols=cols,he'\
        'ight=400,width=400)\n\n',
        "out_profile = raster.profile.copy()    \ncrop_filename = os.path.jo"\
        "in(save_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith  "\
        "rasterio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1_b"\
        "lock = raster.read(window=rasterio_window, masked=True)  \n    dst."\
        "write(RP1_block, window=rasterio_window)\n    \n#Format annotations"\
        " frame\nshp_filename = os.path.join(save_dir,\"{}_{}.shp\".format(i"\
        "mage_name,lowest_index))    \nworst_window.to_file(shp_filename, dr"\
        "iver='ESRI Shapefile')\n\n",
        "rows = slice(6460, 6860, None)\ncols = slice(5440, 5840, None)\nras"\
        "terio_window = rwindow.Window.from_slices(rows=rows,cols=cols,heigh"\
        "t=400,width=400)\nout_profile = raster.profile.copy()    \ncrop_fil"\
        "ename = os.path.join(save_dir,\"{}_{}.tif\".format(image_name,lowes"\
        "t_index)) \nwith  rasterio.open(crop_filename, 'w', **out_profile) "\
        "as dst:\n    RP1_block = raster.read(window=rasterio_window, masked"\
        "=True)  \n    dst.write(RP1_block, window=rasterio_window)\n    \n"\
        "#Format annotations frame\nshp_filename = os.path.join(save_dir,\""\
        "{}_{}.shp\".format(image_name,lowest_index))    \nworst_window.to_f"\
        "ile(shp_filename, driver='ESRI Shapefile')\n\n",
        'window_xmin, window_ymin, width, height = window.getRect()\n',
        'window_xmin\n',
        'xmin = (window_xmin * cell_size) + utm_xmin\nxmax = (window_xmin + '\
        'width) * cell_size  + utm_xmin\nymin = (window_ymin) * cell_size  +'\
        ' utm_ymin\nymax = (window_ymin + height) * cell_size  + utm_ymin\n'\
        '\n',
        'utm_xmin\n',
        'utm_ymin\n',
        'raster.bounds\n',
        'xmin\n',
        'xmax\n',
        'ymin\n',
        'ymax\n',
        'window_ymin\n',
        'height\n',
        "worst_window = data[lowest_index]\n\n#save RGB windows to file\nras"\
        "terio_window = rwindow.Window.from_slices(rows=crop_index[lowest_in"\
        "dex].indices()[0],cols=crop_index[lowest_index].indices()[1])\nout_"\
        "profile = raster.profile.copy()    \ncrop_filename = os.path.join(s"\
        "ave_dir,\"{}_{}.tif\".format(image_name,lowest_index)) \nwith  rast"\
        "erio.open(crop_filename, 'w', **out_profile) as dst:\n    RP1_block"\
        " = raster.read(window=rasterio_window, masked=False)  \n    dst.wri"\
        "te(RP1_block)\n\n",
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w') as dst:"\
        "\n    RP1_block = raster.read(window=rasterio_window, masked=True) "\
        " \n    dst.write(RP1_block)\n\n",
        'raster.crs\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',driver="\
        "\"GTiff\",crs=raster.crs) as dst:\n    RP1_block = raster.read(wind"\
        "ow=rasterio_window, masked=True)  \n    dst.write(RP1_block)\n\n",
        'RP1_block\n',
        'RP1_block.shape\n',
        "with  rasterio.open(crop_filename, 'w',driver=\"GTiff\",crs=raster."\
        "crs) as dst:\n    RP1_block = raster.read(window=rasterio_window, m"\
        "asked=True)  \n    dst.write(RP1_block)\n\n",
        'rasterio_window\n',
        'rasterio_window.width\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',driver="\
        "\"GTiff\",crs=raster.crs,width=rasterio_window.width,height=rasteri"\
        "o_window.height) as dst:\n    RP1_block = raster.read(window=raster"\
        "io_window, masked=True)  \n    dst.write(RP1_block)\n\n",
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',driver="\
        "\"GTiff\",count=3,crs=raster.crs,width=rasterio_window.width,height"\
        "=rasterio_window.height) as dst:\n    RP1_block = raster.read(windo"\
        "w=rasterio_window, masked=True)  \n    dst.write(RP1_block)\n\n",
        'out_profile.dtype\n',
        'out_profile[dtype]\n',
        'out_profile["dtype"]\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',dtype=ou"\
        "t_profile[\"dtype\"],\n                    driver=\"GTiff\",\n     "\
        "               count=3,\n                    crs=raster.crs,\n     "\
        "               width=rasterio_window.width,height=rasterio_window.h"\
        "eight) as dst:\n    RP1_block = raster.read(window=rasterio_window,"\
        " masked=True)  \n    dst.write(RP1_block)\n\n",
        'out_profile\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])\nout_profile = raster.profile.copy()    \n"\
        "crop_filename = os.path.join(save_dir,\"{}_{}.tif\".format(image_na"\
        "me,lowest_index)) \nwith  rasterio.open(crop_filename, 'w',dtype=ou"\
        "t_profile[\"dtype\"],\n                    driver=\"GTiff\",\n     "\
        "               count=3,\n                    crs=raster.crs,\n     "\
        "               width=rasterio_window.width,\n                    tr"\
        "ansform=out_profile[\"transform\"],\n                    height=ras"\
        "terio_window.height) as dst:\n    RP1_block = raster.read(window=ra"\
        "sterio_window, masked=True)  \n    dst.write(RP1_block)\n\n",
        'rasterio_window = rwindow.Window.from_slices(rows=crop_index[lowest'\
        '_index].indices()[0],cols=crop_index[lowest_index].indices()[1])\n',
        'out_image, out_transform = rasterio.mask.mask(raster, rasterio_wind'\
        'ow, crop=True)\n',
        'from rasterio import mas\n',
        'from rasterio import mask\n',
        'out_image, out_transform = mask.mask(raster, rasterio_window, crop='\
        'True)\n',
        "#save RGB windows to file\nrasterio_window = rwindow.Window.from_sl"\
        "ices(rows=crop_index[lowest_index].indices()[0],cols=crop_index[low"\
        "est_index].indices()[1])    \ncrop_filename = os.path.join(save_dir"\
        ",\"{}_{}.tif\".format(image_name,lowest_index)) \nwith  rasterio.op"\
        "en(crop_filename, 'w',dtype=out_profile[\"dtype\"],\n              "\
        "      driver=\"GTiff\",\n                    count=3,\n            "\
        "        crs=raster.crs,\n                    width=rasterio_window."\
        "width,\n                    transform=rasterio_window.window_transf"\
        "orm,\n                    height=rasterio_window.height) as dst:\n"\
        "    RP1_block = raster.read(window=rasterio_window, masked=True)  "\
        "\n    dst.write(RP1_block)\n\n",
        'rwindow.transform(rasterio_window)\n',
        'rwindow.transform(rasterio_window,raster.window_transform)\n',
        'raster.window_transform(rasterio_window)\n',
        "with  rasterio.open(crop_filename, 'w',dtype=out_profile[\"dtype\""\
        "],\n                    driver=\"GTiff\",\n                    coun"\
        "t=3,\n                    crs=raster.crs,\n                    widt"\
        "h=rasterio_window.width,\n                    transform=raster.wind"\
        "ow_transform(rasterio_window),\n                    height=rasterio"\
        "_window.height) as dst:\n    RP1_block = raster.read(window=rasteri"\
        "o_window, masked=True)  \n    dst.write(RP1_block)\n\n"],
                                   u'file:/Users/ben/Desktop/test.py': ['imp'\
        'ort geopandas\n',
        'shp= geopandas.read_file("/Users/ben/Dropbox/Weecology/DeepForest/O'\
        'regon/train.shp")\n',
        'shp\n',
        'shp.is_valid\n',
        'sum(~shp.is_valid)\n',
        'shp.xmin\n',
        'shp.left\n',
        'shp.columns\n',
        'shp.geometry.area\n',
        'shp.geometry.area ==0\n',
        'sum(shp.geometry.area ==0)\n']},
                       'launch-id': None,
                       'sel-line': 1223L,
                       'sel-line-start': 57446L,
                       'selection_end': 57459L,
                       'selection_start': 57459L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 94L,
                       'folded-linenos': [],
                       'history': {None: ['-1000 - 100\n',
        'assert [1,2,3] == [1,2,3]\n',
        'a="2018_NIWO_2_447000_4431000_image"\n',
        'import re\n',
        're.search(a)\n',
        're.search(a,"\\w+_image").group(0)\n',
        're.search(a,"\\w+_image").groups(0)\n',
        're.search(a,"\\w+_image")\n',
        're.search(a,"image")\n',
        'print(re.search(a,"image"))\n',
        'print(re.search(a,"*"))\n',
        'print(re.search(a,"*+"))\n',
        'print(re.search("*",a))\n',
        'print(re.search("+",a))\n',
        'print(re.search("image",a))\n',
        'print(re.search("image",a).group(0))\n',
        'print(re.search("*_image",a).group(0))\n',
        'print(re.search("_image",a).group(0))\n',
        'print(re.search("\\d+_image",a).group(0))\n',
        'print(re.search("\\d+_\\d+_image",a).group(0))\n',
        'print(re.search("{\\d+_\\d+}_image",a).group(0))\n',
        'print(re.search("(\\d+_\\d+)_image",a).group(0))\n',
        'print(re.search("(\\d+_\\d+)_image",a).group(1))\n',
        'b = re.search("(\\d+_\\d+)_image",a).group(1)\n',
        'b in a\n',
        'b in [a,a]\n',
        '[a,a]\n',
        '[b] in [a,a]\n',
        'b\n',
        'a = "2018_NIWO_2_447000_4431000_image"\n',
        'print(re.search(a))\n',
        'print(re.search("\\\\d+",))\n',
        'print(re.search(a,"\\\\d+"))\n',
        'print(re.search(a,"OSBS"))\n',
        'print(re.search(a,"NIWO))\n',
        'print(re.search(a,"NIWO"))\n',
        'print(bool(re.search(a,"NIWO")))\n',
        'a\n',
        'print(bool(re.search(a,"image")))\n',
        'print(bool(re.search(a,"_image")))\n',
        'print(bool(re.search(a,"*_image")))\n',
        'print(bool(re.search("*_image",a)))\n',
        'print(bool(re.search("image",a)))\n',
        'print(bool(re.search("NIWO",a)))\n',
        'bool(re.search("NIWO",a))\n',
        'bool(re.search("NIWO|OSBS",a))\n',
        'import deepforest\n',
        'os\n',
        '# Utility script to crop a sample image to upload to zooniverse. Fi'\
        'les need to be under 1MB.\nimport glob\nfrom deepforest import prep'\
        'rocess\nimport cv2\n\n#Find images\nimages = glob.glob("/Users/ben/'\
        'Dropbox/Everglades/Zooniverse/data/*.JPG")\n\nfor image_path in ima'\
        'ges:\n    numpy_image = cv2.imread(image_path)    \n    \n    #Crea'\
        'te windows\n    windows = preprocess.compute_windows(numpy_image, 4'\
        '00, patch_overlap=0)\n    \n    for index, window in enumerate(wind'\
        'ows):\n        #Crop and save\n        crop = numpy_image[window.ge'\
        'tIndices()]\n        filename = "{}_{}.jpg".format(os.path.splitext'\
        '(image_path,index))\n        cv2.imsave(filename, crop)\n\n',
        'window\n',
        'window.get\n',
        'for index, window in enumerate(windows):\n    #Crop and save\n    c'\
        'rop = numpy_image[window.indices()]\n    filename = "{}_{}.jpg".for'\
        'mat(os.path.splitext(image_path,index))\n    cv2.imsave(filename, c'\
        'rop)\n\n',
        'import os\n',
        '# Utility script to crop a sample image to upload to zooniverse. Fi'\
        'les need to be under 1MB.\nimport glob\nimport os\nimport cv2\nfrom'\
        ' deepforest import preprocess\n\n#Find images\nimages = glob.glob("'\
        '/Users/ben/Dropbox/Everglades/Zooniverse/data/*.JPG")\n\nfor image_'\
        'path in images:\n    numpy_image = cv2.imread(image_path)    \n    '\
        '\n    #Create windows\n    windows = preprocess.compute_windows(num'\
        'py_image, 400, patch_overlap=0)\n    \n    for index, window in enu'\
        'merate(windows):\n        #Crop and save\n        crop = numpy_imag'\
        'e[window.indices()]\n        filename = "{}_{}.jpg".format(os.path.'\
        'splitext(image_path,index))\n        cv2.imsave(filename, crop)\n\n',
        '# Utility script to crop a sample image to upload to zooniverse. Fi'\
        'les need to be under 1MB.\nimport glob\nimport os\nimport cv2\nfrom'\
        ' deepforest import preprocess\n\n#Find images\nimages = glob.glob("'\
        '/Users/ben/Dropbox/Everglades/Zooniverse/data/*.JPG")\n\nfor image_'\
        'path in images:\n    numpy_image = cv2.imread(image_path)    \n    '\
        '\n    #Create windows\n    windows = preprocess.compute_windows(num'\
        'py_image, 400, patch_overlap=0)\n    \n    for index, window in enu'\
        'merate(windows):\n        #Crop and save\n        crop = numpy_imag'\
        'e[window.indices()]\n        filename = "{}_{}.jpg".format(os.path.'\
        'splitext(image_path)[0],index)\n        cv2.imsave(filename, crop)'\
        '\n\n',
        '# Utility script to crop a sample image to upload to zooniverse. Fi'\
        'les need to be under 1MB.\nimport glob\nimport os\nimport cv2\nfrom'\
        ' deepforest import preprocess\n\n#Find images\nimages = glob.glob("'\
        '/Users/ben/Dropbox/Everglades/Zooniverse/data/*.JPG")\n\nfor image_'\
        'path in images:\n    numpy_image = cv2.imread(image_path)    \n    '\
        '\n    #Create windows\n    windows = preprocess.compute_windows(num'\
        'py_image, 400, patch_overlap=0)\n    \n    for index, window in enu'\
        'merate(windows):\n        #Crop and save\n        crop = numpy_imag'\
        'e[window.indices()]\n        filename = "{}_{}.jpg".format(os.path.'\
        'splitext(image_path)[0],index)\n        cv2.imwrite(filename, crop)'\
        '\n\n',
        '# Utility script to crop a sample image to upload to zooniverse. Fi'\
        'les need to be under 1MB.\nimport glob\nimport os\nimport cv2\nfrom'\
        ' deepforest import preprocess\n\n#Find images\nimages = glob.glob("'\
        '/Users/ben/Dropbox/Everglades/Zooniverse/data/*.JPG")\n\nfor image_'\
        'path in images:\n    numpy_image = cv2.imread(image_path)    \n    '\
        '\n    #Create windows\n    windows = preprocess.compute_windows(num'\
        'py_image, 2000, patch_overlap=0.1)\n    \n    for index, window in '\
        'enumerate(windows):\n        #Crop and save\n        crop = numpy_i'\
        'mage[window.indices()]\n        filename = "{}_{}.jpg".format(os.pa'\
        'th.splitext(image_path)[0],index)\n        cv2.imwrite(filename, cr'\
        'op)\n\n',
        "# Utility script to crop a sample image to upload to zooniverse. Fi"\
        "les need to be under 1MB.\n\"\"\"\nI've played around with the patc"\
        "h size argument, we want to make the image small, but give enough c"\
        "ontext for the viewer, so not too small.\n\"\"\"\nimport glob\nimpo"\
        "rt os\nimport cv2\nfrom deepforest import preprocess\n\n#Find image"\
        "s\nimages = glob.glob(\"/Users/ben/Dropbox/Everglades/Zooniverse/da"\
        "ta/*.JPG\")\n\nfor image_path in images:\n    numpy_image = cv2.imr"\
        "ead(image_path)    \n    \n    #Create windows\n    \n    windows ="\
        " preprocess.compute_windows(numpy_image, 1000, patch_overlap=0.1)\n"\
        "    \n    for index, window in enumerate(windows):\n        #Crop a"\
        "nd save\n        crop = numpy_image[window.indices()]\n        file"\
        "name = \"{}_{}.jpg\".format(os.path.splitext(image_path)[0],index)"\
        "\n        cv2.imwrite(filename, crop)\n\n",
        '#convert hand annotations from shp into DeepForest format\ntrain_rg'\
        'b = "/Users/ben/Dropbox/Weecology/DeepForest/Oregon/street_trees_tr'\
        'ain.tif"\nannotation = shapefile_to_annotations(shapefile="/Users/b'\
        'en/Dropbox/Weecology/DeepForest/Oregon/train_projected.shp",\n     '\
        '                                 rgb=train_rgb)\n\n#Write converted'\
        ' dataframe to file. Saved alongside the images\ncrop_dir = "/Users/'\
        'ben/Dropbox/Weecology/DeepForest/Oregon/"\nannotation.to_csv(crop_d'\
        'ir + "train_example.csv", index=False)\n\n#Find data on path\ntrain'\
        '_annotations= preprocess.split_raster(path_to_raster=train_rgb,\n  '\
        '                               annotations_file= crop_dir + "train_'\
        'example.csv",\n                                 base_dir=crop_dir,'\
        '\n                                 patch_size=400,\n               '\
        '                  patch_overlap=0.05)\n\n',
        '#Write converted dataframe to file. Saved alongside the images\ncro'\
        'p_dir = "/Users/ben/Dropbox/Weecology/DeepForest/Oregon/"\nannotati'\
        'on.to_csv(crop_dir + "train_example.csv", index=False)\n\n#Find dat'\
        'a on path\ntrain_annotations= preprocess.split_raster(path_to_raste'\
        'r=train_rgb,\n                                 annotations_file= cr'\
        'op_dir + "train_example.csv",\n                                 bas'\
        'e_dir=crop_dir,\n                                 patch_size=400,\n'\
        '                                 patch_overlap=0.05)\n\n',
        "## Define geospatial function from https://gist.github.com/bw4sz/e2"\
        "fff9c9df0ae26bd2bfa8953ec4a24c\n#\"project\" into layer CRS to over"\
        "lap with street trees. This isn't really a projection but a transla"\
        "tion of the coordinate system\n#Here is a simple utility function f"\
        "or reading in annotation files from .shp. This is not pre-installed"\
        " in DeepForest since it relies on GDAL python packages, which can b"\
        "e tricky to prebuild for multiple operating systems and are only ne"\
        "eded for this task. See http://geopandas.org/install.html.\ndef pro"\
        "ject(raster_path, boxes):\n    \"\"\"\n    Convert image coordinate"\
        "s into a geospatial object to overlap with input image\n    raster_"\
        "path: path to the raster .tif on disk. Assumed to have a valid spat"\
        "ial projection\n    boxes: a prediction pandas dataframe from deepf"\
        "orest.predict_tile()\n    \"\"\"\n    with rasterio.open(raster_pat"\
        "h) as dataset:\n        bounds = dataset.bounds\n        pixelSizeX"\
        ", pixelSizeY  = dataset.res\n\n    #subtract origin. Recall that nu"\
        "mpy origin is top left! Not bottom left.\n    boxes[\"left\"] = (bo"\
        "xes[\"xmin\"] *pixelSizeX) + bounds.left\n    boxes[\"right\"] = (b"\
        "oxes[\"xmax\"] * pixelSizeX) + bounds.left\n    boxes[\"top\"] = bo"\
        "unds.top - (boxes[\"ymin\"] * pixelSizeY) \n    boxes[\"bottom\"] ="\
        " bounds.top - (boxes[\"ymax\"] * pixelSizeY)\n    \n    # combine c"\
        "olumn to a shapely Box() object, save shapefile\n    boxes['geometr"\
        "y'] = boxes.apply(lambda x: shapely.geometry.box(x.left,x.bottom,x."\
        "right,x.top), axis=1)\n    boxes = geopandas.GeoDataFrame(boxes, ge"\
        "ometry='geometry')\n    \n    boxes.crs = \"+proj=lcc +lat_1=43 +la"\
        "t_2=45.5 +lat_0=41.75 +lon_0=-120.5 +x_0=399999.9999999999 +y_0=0 +"\
        "ellps=GRS80 +units=ft +no_defs\"\n\n    return boxes\n\ndef shapefi"\
        "le_to_annotations(shapefile, rgb, savedir=\".\"):\n    \"\"\"\n    "\
        "Convert a shapefile of annotations into annotations csv file for De"\
        "epForest training and evaluation\n    Args:\n        shapefile: Pat"\
        "h to a shapefile on disk. If a label column is present, it will be "\
        "used, else all labels are assumed to be \"Tree\"\n        rgb: Path"\
        " to the RGB image on disk\n        savedir: Directory to save csv f"\
        "iles\n    Returns:\n        None: a csv file is written\n    \"\"\""\
        "\n    #Read shapefile\n    \n\n    gdf = geopandas.read_file(shapef"\
        "ile)\n\n    #get coordinates\n    df = gdf.geometry.bounds\n\n    #"\
        "raster bounds\n    with rasterio.open(rgb) as src:\n        left, b"\
        "ottom, right, top = src.bounds\n\n    #Transform project coordinate"\
        "s to image coordinates\n    df[\"tile_xmin\"] = df.minx - left\n   "\
        " df[\"tile_xmin\"] = df[\"tile_xmin\"].astype(int)\n\n    df[\"tile"\
        "_xmax\"] = df.maxx - left\n    df[\"tile_xmax\"] = df[\"tile_xmax\""\
        "].astype(int)\n\n    #UTM is given from the top, but origin of an i"\
        "mage is top left\n\n    df[\"tile_ymax\"] = top - df.miny \n    df["\
        "\"tile_ymax\"] = df[\"tile_ymax\"].astype(int)\n\n    df[\"tile_ymi"\
        "n\"] = top - df.maxy\n    df[\"tile_ymin\"] = df[\"tile_ymin\"].ast"\
        "ype(int)    \n\n    #Add labels is they exist\n    if \"label\" in "\
        "gdf.columns:\n        df[\"label\"] = gdf[\"label\"]\n    else:\n  "\
        "      df[\"label\"] = \"Tree\"\n\n    #add filename\n    df[\"image"\
        "_path\"] = rgb\n\n    #select columns\n    result = df[[\"image_pat"\
        "h\",\"tile_xmin\",\"tile_ymin\",\"tile_xmax\",\"tile_ymax\",\"label"\
        "\"]]\n    result = result.rename(columns={\"tile_xmin\":\"xmin\",\""\
        "tile_ymin\":\"ymin\",\"tile_xmax\":\"xmax\",\"tile_ymax\":\"ymax\""\
        "})\n\n    return result\n\n\n",
        'import geopandas\n',
        'import rasterio\n',
        'from deepforest import preprocess\n',
        '#convert hand annotations from shp into DeepForest format\ntrain_rg'\
        'b = "/Users/ben/Dropbox/Weecology/DeepForest/Oregon/street_trees_tr'\
        'ain.tif"\nannotation = shapefile_to_annotations(shapefile="/Users/b'\
        'en/Dropbox/Weecology/DeepForest/Oregon/train_projected.shp",\n     '\
        '                                 rgb=train_rgb)\n\n#Write converted'\
        ' dataframe to file. Saved alongside the images\ncrop_dir = "/Users/'\
        'ben/Dropbox/Weecology/DeepForest/Oregon/"\nannotation.to_csv(crop_d'\
        'ir + "train_example.csv", index=False)\n\n#Find data on path\ntrain'\
        '_annotations= preprocess.split_raster(path_to_raster=train_rgb,\n  '\
        '                               annotations_file= crop_dir + "train_'\
        'example.csv",\n                                 base_dir=crop_dir,'\
        '\n                                 patch_size=400,\n               '\
        '                  patch_overlap=0.05)\n#View output\ntrain_annotati'\
        'ons.head()\n\n#Write window annotations file without a header row, '\
        'same location as the "base_dir" above.\nannotations_file= os.path.j'\
        'oin(crop_dir, "train_example.csv")\ntrain_annotations.to_csv(annota'\
        'tions_file,index=False, header=None)\n\n']},
                       'launch-id': None,
                       'sel-line': 116L,
                       'sel-line-start': 5818L,
                       'selection_end': 5818L,
                       'selection_start': 5818L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('start_cluster.py'),
        {'attrib-starts': [('start',
                            30)],
         'first-line': 38L,
         'folded-linenos': [],
         'sel-line': 43L,
         'sel-line-start': 1327L,
         'selection_end': 1739L,
         'selection_start': 1327L,
         'zoom': 0L},
        1581204051.339281],
        [loc('unknown:<untitled> #44'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 17L,
          'sel-line-start': 455L,
          'selection_end': 474L,
          'selection_start': 474L,
          'zoom': 0L},
         1581204054.643015],
        [loc('start_cluster.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 6L,
          'sel-line-start': 119L,
          'selection_end': 199L,
          'selection_start': 119L,
          'zoom': 0L},
         1581204059.57736],
        [loc('unknown:<untitled> #45'),
         {'attrib-starts': [],
          'first-line': 4L,
          'folded-linenos': [],
          'sel-line': 10L,
          'sel-line-start': 260L,
          'selection_end': 276L,
          'selection_start': 276L,
          'zoom': 0L},
         1581204189.000369],
        [loc('start_cluster.py'),
         {'attrib-starts': [('start',
                             30)],
          'first-line': 50L,
          'folded-linenos': [],
          'sel-line': 57L,
          'sel-line-start': 1762L,
          'selection_end': 2386L,
          'selection_start': 1762L,
          'zoom': 0L},
         1581204220.682518],
        [loc('unknown:<untitled> #46'),
         {'attrib-starts': [],
          'first-line': 25L,
          'folded-linenos': [],
          'sel-line': 35L,
          'sel-line-start': 831L,
          'selection_end': 855L,
          'selection_start': 855L,
          'zoom': 0L},
         1581204528.464312],
        [loc('start_cluster.py'),
         {'attrib-starts': [('start',
                             30)],
          'first-line': 50L,
          'folded-linenos': [],
          'sel-line': 57L,
          'sel-line-start': 1762L,
          'selection_end': 2386L,
          'selection_start': 1762L,
          'zoom': 0L},
         1581204529.714811],
        [loc('unknown:<untitled> #47'),
         {'attrib-starts': [],
          'first-line': 31L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 553L,
          'selection_end': 1032L,
          'selection_start': 553L,
          'zoom': 0L},
         1581204603.60246],
        [loc('start_cluster.py'),
         {'attrib-starts': [('start',
                             30)],
          'first-line': 74L,
          'folded-linenos': [],
          'sel-line': 85L,
          'sel-line-start': 2531L,
          'selection_end': 2531L,
          'selection_start': 2531L,
          'zoom': 0L},
         1581205056.832349],
        [loc('unknown:<untitled> #48'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 13L,
          'sel-line-start': 317L,
          'selection_end': 336L,
          'selection_start': 336L,
          'zoom': 0L},
         1581289984.578944],
        [loc('../EvergladesWadingBird/DataCleaningScripts/crop_image.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 151L,
          'selection_end': 163L,
          'selection_start': 163L,
          'zoom': 0L},
         1581290688.081244],
        [loc('generate.py'),
         {'attrib-starts': [('find_files',
                             7)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 7L,
          'sel-line-start': 141L,
          'selection_end': 675L,
          'selection_start': 141L,
          'zoom': 0L},
         1581290692.558157],
        [loc('generate.py'),
         {'attrib-starts': [('find_files',
                             7)],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 7L,
          'sel-line-start': 141L,
          'selection_end': 149L,
          'selection_start': 146L,
          'zoom': 0L},
         1581290705.765847],
        [loc('utils/tfrecords.py'),
         {'attrib-starts': [('create_tfrecords',
                             26)],
          'first-line': 29L,
          'folded-linenos': [],
          'sel-line': 33L,
          'sel-line-start': 1165L,
          'selection_end': 1169L,
          'selection_start': 1169L,
          'zoom': 0L},
         1581290708.230662],
        [loc('utils/tfrecords.py'),
         {'attrib-starts': [('create_tfrecords',
                             26)],
          'first-line': 53L,
          'folded-linenos': [],
          'sel-line': 62L,
          'sel-line-start': 2208L,
          'selection_end': 2256L,
          'selection_start': 2250L,
          'zoom': 0L},
         1581290712.74481],
        [loc('../EvergladesWadingBird/DataCleaningScripts/crop_image.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 23L,
          'sel-line-start': 772L,
          'selection_end': 807L,
          'selection_start': 807L,
          'zoom': 0L},
         1581370821.915357],
        [loc('../../miniconda3/envs/test/lib/python3.7/site-packages/deepforest/preprocess.py'),
         {'attrib-starts': [('select_annotations',
                             37)],
          'first-line': 27L,
          'folded-linenos': [],
          'sel-line': 37L,
          'sel-line-start': 1110L,
          'selection_end': 1110L,
          'selection_start': 1110L,
          'zoom': 0L},
         1581370832.08037],
        [loc('../../Desktop/test.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 3L,
          'sel-line-start': 67L,
          'selection_end': 67L,
          'selection_start': 67L,
          'zoom': 0L},
         1581370871.956725],
        [loc('unknown:<untitled> #49'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 13L,
          'sel-line-start': 317L,
          'selection_end': 336L,
          'selection_start': 336L,
          'zoom': 0L},
         1581370882.343741],
        [loc('../../miniconda3/envs/test/lib/python3.7/site-packages/deepforest/preprocess.py'),
         {'attrib-starts': [('split_raster',
                             115)],
          'first-line': 137L,
          'folded-linenos': [],
          'sel-line': 148L,
          'sel-line-start': 6432L,
          'selection_end': 6469L,
          'selection_start': 6469L,
          'zoom': 0L},
         1581371701.423849]],
        20),
        'current-loc': loc('../../miniconda3/envs/test/lib/python3.7/site-packages/deepforest/preprocess.py'),
        'editor-state-list': [(loc('main.py'),
                               {'attrib-starts': [('run_lidar',
        69)],
                                'first-line': 86L,
                                'folded-linenos': [],
                                'sel-line': 93L,
                                'sel-line-start': 2925L,
                                'selection_end': 2950L,
                                'selection_start': 2950L,
                                'zoom': 0L}),
                              (loc('start_cluster.py'),
                               {'attrib-starts': [('start',
        30)],
                                'first-line': 74L,
                                'folded-linenos': [],
                                'sel-line': 85L,
                                'sel-line-start': 2531L,
                                'selection_end': 2531L,
                                'selection_start': 2531L,
                                'zoom': 0L}),
                              (loc('generate.py'),
                               {'attrib-starts': [('find_files',
        7)],
                                'first-line': 18L,
                                'folded-linenos': [],
                                'sel-line': 7L,
                                'sel-line-start': 141L,
                                'selection_end': 149L,
                                'selection_start': 146L,
                                'zoom': 0L}),
                              (loc('../EvergladesWadingBird/DataCleaningScripts/crop_image.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 23L,
                                'sel-line-start': 772L,
                                'selection_end': 807L,
                                'selection_start': 807L,
                                'zoom': 0L}),
                              (loc('utils/tfrecords.py'),
                               {'attrib-starts': [('create_tfrecords',
        26)],
                                'first-line': 53L,
                                'folded-linenos': [],
                                'sel-line': 62L,
                                'sel-line-start': 2208L,
                                'selection_end': 2256L,
                                'selection_start': 2250L,
                                'zoom': 0L}),
                              (loc('../../miniconda3/envs/test/lib/python3.7/site-packages/deepforest/preprocess.py'),
                               {'attrib-starts': [('split_raster',
        115)],
                                'first-line': 137L,
                                'folded-linenos': [],
                                'sel-line': 148L,
                                'sel-line-start': 6432L,
                                'selection_end': 6469L,
                                'selection_start': 6469L,
                                'zoom': 0L}),
                              (loc('../../Desktop/test.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 3L,
                                'sel-line-start': 67L,
                                'selection_end': 67L,
                                'selection_start': 67L,
                                'zoom': 0L}),
                              (loc('../../miniconda3/envs/test/lib/python3.7/site-packages/pandas/core/generic.py'),
                               {'attrib-starts': [('NDFrame',
        150),
        ('NDFrame.__getattr__',
         5256)],
                                'first-line': 5261L,
                                'folded-linenos': [],
                                'sel-line': 5267L,
                                'sel-line-start': 176020L,
                                'selection_end': 176050L,
                                'selection_start': 176050L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('main.py'),
         loc('start_cluster.py'),
         loc('generate.py'),
         loc('../EvergladesWadingBird/DataCleaningScripts/crop_image.py'),
         loc('utils/tfrecords.py'),
         loc('../../miniconda3/envs/test/lib/python3.7/site-packages/deepforest/preprocess.py'),
         loc('../../Desktop/test.py'),
         loc('../../miniconda3/envs/test/lib/python3.7/site-packages/pandas/core/generic.py')]),
                               'open_files': [u'../../Desktop/test.py',
        u'../EvergladesWadingBird/DataCleaningScripts/crop_image.py',
        u'generate.py',
        u'main.py',
        u'start_cluster.py',
        u'utils/tfrecords.py',
        u'../../miniconda3/envs/test/lib/python3.7/site-packages/deepforest/preprocess.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.44682752457551383},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (1440,
                         0,
                         1920,
                         1080)}]}
guimgr.recent-documents = [loc('../../miniconda3/envs/test/lib/python3.7/site-packages/pandas/core/generic.py'),
                           loc('../../miniconda3/envs/test/lib/python3.7/site-packages/deepforest/preprocess.py')]
guimgr.visual-state = {loc('../DeepForest/.travis.yml'): {'attrib-starts': [],
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 186L,
        'selection_end': 233L,
        'selection_start': 233L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/deepforest.py'): {'attr'\
        'ib-starts': [],
        'first-line': 115L,
        'folded-linenos': [],
        'sel-line': 30L,
        'sel-line-start': 956L,
        'selection_end': 1007L,
        'selection_start': 994L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/predict.py'): {'attrib-'\
        'starts': [('predict_image',
                    22)],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 82L,
        'sel-line-start': 3281L,
        'selection_end': 3298L,
        'selection_start': 3298L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/preprocess.py'): {'attr'\
        'ib-starts': [('split_raster',
                       115)],
        'first-line': 150L,
        'folded-linenos': [],
        'sel-line': 161L,
        'sel-line-start': 6779L,
        'selection_end': 6796L,
        'selection_start': 6787L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/retinanet_train.py'): {'a'\
        'ttrib-starts': [('create_generators',
                          179)],
        'first-line': 207L,
        'folded-linenos': [],
        'sel-line': 220L,
        'sel-line-start': 8520L,
        'selection_end': 8544L,
        'selection_start': 8537L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/tfrecords.py'): {'attri'\
        'b-starts': [('_parse_fn',
                      164)],
        'first-line': 162L,
        'folded-linenos': [],
        'sel-line': 167L,
        'sel-line-start': 7432L,
        'selection_end': 7448L,
        'selection_start': 7448L,
        'zoom': 0L},
                       loc('../DeepForest/deepforest/utilities.py'): {'attri'\
        'b-starts': [('use_release',
                      52)],
        'first-line': 80L,
        'folded-linenos': [],
        'sel-line': 52L,
        'sel-line-start': 1487L,
        'selection_end': 1502L,
        'selection_start': 1491L,
        'zoom': 0L},
                       loc('../DeepForest/keras_retinanet/bin/train.py'): {'a'\
        'ttrib-starts': [('parse_args',
                          371)],
        'first-line': 406L,
        'folded-linenos': [],
        'sel-line': 406L,
        'sel-line-start': 15687L,
        'selection_end': 15847L,
        'selection_start': 15687L,
        'zoom': 0L},
                       loc('../DeepForest/tests/test_preprocess.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest/tests/test_utilities.py'): {'attri'\
        'b-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepForest_Model/GenerateAnchors.py'): {'attr'\
        'ib-starts': [('generate_pretraining',
                       14)],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 484L,
        'selection_end': 525L,
        'selection_start': 518L,
        'zoom': 0L},
                       loc('../DeepForest_Model/dask_utility.py'): {'attrib-'\
        'starts': [],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 64L,
        'selection_end': 105L,
        'selection_start': 105L,
        'zoom': 0L},
                       loc('../DeepForest_Model/generate.py'): {'attrib-star'\
        'ts': [],
        'first-line': 196L,
        'folded-linenos': [],
        'sel-line': 231L,
        'sel-line-start': 9973L,
        'selection_end': 9973L,
        'selection_start': 9973L,
        'zoom': 0L},
                       loc('LIDAR.py'): {'attrib-starts': [('drape_boxes',
        144)],
        'first-line': 161L,
        'folded-linenos': [],
        'sel-line': 144L,
        'sel-line-start': 4199L,
        'selection_end': 4224L,
        'selection_start': 4222L,
        'zoom': 0L},
                       loc('SLURM/generate.sbatch'): {'attrib-starts': [],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 525L,
        'selection_end': 590L,
        'selection_start': 525L,
        'zoom': 0L},
                       loc('SLURM/predict.sbatch'): {'attrib-starts': [],
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 521L,
        'selection_end': 537L,
        'selection_start': 537L,
        'zoom': 0L},
                       loc('SLURM/pytest.sbatch'): {'attrib-starts': [],
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 590L,
        'selection_end': 622L,
        'selection_start': 622L,
        'zoom': 0L},
                       loc('SLURM/test.sbatch'): {'attrib-starts': [],
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 19L,
        'sel-line-start': 541L,
        'selection_end': 560L,
        'selection_start': 558L,
        'zoom': 0L},
                       loc('__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('dask_example.py'): {'attrib-starts': [],
        'first-line': 69L,
        'folded-linenos': [],
        'sel-line': 82L,
        'sel-line-start': 2611L,
        'selection_end': 2645L,
        'selection_start': 2645L,
        'zoom': 0L},
                       loc('dask_small.py'): {'attrib-starts': [('load_tenso'\
        'rflow',
        25)],
        'first-line': 20L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 653L,
        'selection_end': 826L,
        'selection_start': 653L,
        'zoom': 0L},
                       loc('environment.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 94L,
        'selection_end': 108L,
        'selection_start': 108L,
        'zoom': 0L},
                       loc('generate.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 20L,
        'selection_end': 51L,
        'selection_start': 51L,
        'zoom': 0L},
                       loc('generate_crops.py'): {'attrib-starts': [('genera'\
        'te_training',
        14)],
        'first-line': 88L,
        'folded-linenos': [],
        'sel-line': 68L,
        'sel-line-start': 2484L,
        'selection_end': 2559L,
        'selection_start': 2559L,
        'zoom': 0L},
                       loc('main.py'): {'attrib-starts': [('run',
        6)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 22L,
        'sel-line-start': 604L,
        'selection_end': 608L,
        'selection_start': 608L,
        'zoom': 0L},
                       loc('predict.py'): {'attrib-starts': [('predict_tiles',
        43)],
        'first-line': 58L,
        'folded-linenos': [],
        'sel-line': 70L,
        'sel-line-start': 3056L,
        'selection_end': 3121L,
        'selection_start': 3097L,
        'zoom': 0L},
                       loc('scratch.py'): {'attrib-starts': [],
        'first-line': 18L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 936L,
        'selection_end': 965L,
        'selection_start': 965L,
        'zoom': 0L},
                       loc('start_cluster.py'): {'attrib-starts': [('start',
        30)],
        'first-line': 17L,
        'folded-linenos': [],
        'sel-line': 30L,
        'sel-line-start': 980L,
        'selection_end': 996L,
        'selection_start': 996L,
        'zoom': 0L},
                       loc('test_dask.py'): {'attrib-starts': [('add',
        23)],
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 443L,
        'selection_end': 459L,
        'selection_start': 459L,
        'zoom': 0L},
                       loc('test_start_cluster.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 139L,
        'selection_end': 210L,
        'selection_start': 180L,
        'zoom': 0L},
                       loc('tests/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_LIDAR.py'): {'attrib-starts': [('test'\
        '_postprocess',
        41)],
        'first-line': 41L,
        'folded-linenos': [],
        'sel-line': 50L,
        'sel-line-start': 1340L,
        'selection_end': 1370L,
        'selection_start': 1370L,
        'zoom': 0L},
                       loc('tests/test_dask.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 47L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_predict.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 271L,
        'selection_end': 288L,
        'selection_start': 288L,
        'zoom': 0L},
                       loc('tests/test_start_cluster.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 85L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_tfrecords.py'): {'attrib-starts': [('t'\
        'est_create_tfrecords',
        19)],
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 20L,
        'sel-line-start': 411L,
        'selection_end': 531L,
        'selection_start': 411L,
        'zoom': 0L},
                       loc('tfrecords.py'): {'attrib-starts': [('create_tens'\
        'ors',
        111)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 113L,
        'sel-line-start': 3884L,
        'selection_end': 3888L,
        'selection_start': 3888L,
        'zoom': 0L},
                       loc('utils/tfrecords.py'): {'attrib-starts': [('creat'\
        'e_tfrecords',
        26)],
        'first-line': 29L,
        'folded-linenos': [],
        'sel-line': 44L,
        'sel-line-start': 1547L,
        'selection_end': 1551L,
        'selection_start': 1551L,
        'zoom': 0L},
                       loc('../NeonTreeEvaluation/annotations/2018_OSBS_4_405000_3286000_image.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/train.py'): {'a'\
        'ttrib-starts': [('create_models',
                          77)],
        'first-line': 115L,
        'folded-linenos': [],
        'sel-line': 107L,
        'sel-line-start': 4157L,
        'selection_end': 4204L,
        'selection_start': 4189L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/image.py'): {'a'\
        'ttrib-starts': [('preprocess_image',
                          35)],
        'first-line': 48L,
        'folded-linenos': [],
        'sel-line': 56L,
        'sel-line-start': 1845L,
        'selection_end': 1860L,
        'selection_start': 1860L,
        'zoom': 0L},
                       loc('../../Dropbox/Weecology/Drone/RP_2015_P1.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../Dropbox/Weecology/Drone/RP_2015_P6.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 131L,
        'selection_end': 154L,
        'selection_start': 154L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/PIL/Image.py'): {'a'\
        'ttrib-starts': [('open',
                          2769)],
        'first-line': 2803L,
        'folded-linenos': [],
        'sel-line': 2813L,
        'sel-line-start': 95395L,
        'selection_end': 95448L,
        'selection_start': 95395L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/_pytest/python.py'): {'a'\
        'ttrib-starts': [('Module',
                          419),
                         ('Module._importtestmodule',
                          487)],
        'first-line': 513L,
        'folded-linenos': [],
        'sel-line': 526L,
        'sel-line-start': 19577L,
        'selection_end': 19613L,
        'selection_start': 19613L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/fiona/collection.py'): {'a'\
        'ttrib-starts': [('Collection',
                          25),
                         ('Collection.__init__',
                          34)],
        'first-line': 51L,
        'folded-linenos': [],
        'sel-line': 66L,
        'sel-line-start': 2725L,
        'selection_end': 2725L,
        'selection_start': 2725L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/keras/engine/training_utils.py'): {'a'\
        'ttrib-starts': [('check_num_samples',
                          530)],
        'first-line': 559L,
        'folded-linenos': [],
        'sel-line': 570L,
        'sel-line-start': 23889L,
        'selection_end': 23889L,
        'selection_start': 23889L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          122),
                         ('NDFrame.__getattr__',
                          5161)],
        'first-line': 5167L,
        'folded-linenos': [],
        'sel-line': 5178L,
        'sel-line-start': 171370L,
        'selection_end': 171370L,
        'selection_start': 171370L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/rtree/index.py'): {'a'\
        'ttrib-starts': [('Index',
                          92),
                         ('Index.get_coordinate_pointers',
                          291)],
        'first-line': 309L,
        'folded-linenos': [],
        'sel-line': 319L,
        'sel-line-start': 10780L,
        'selection_end': 10814L,
        'selection_start': 10814L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/tensorflow/python/client/session.py'): {'a'\
        'ttrib-starts': [('BaseSession',
                          620),
                         ('BaseSession._do_call',
                          1353)],
        'first-line': 1364L,
        'folded-linenos': [],
        'sel-line': 1369L,
        'sel-line-start': 52327L,
        'selection_end': 52327L,
        'selection_start': 52327L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/crowns/lib/python3.7/site-packages/tensorflow/python/framework/ops.py'): {'a'\
        'ttrib-starts': [('Graph',
                          3001),
                         ('Graph._as_graph_element_locked',
                          3797)],
        'first-line': 3858L,
        'folded-linenos': [],
        'sel-line': 3874L,
        'sel-line-start': 139080L,
        'selection_end': 139080L,
        'selection_start': 139080L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pyfor/lib/python3.6/site-packages/_pytest/python.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pyfor/lib/python3.6/site-packages/fiona/collection.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/test/lib/python3.7/site-packages/laspy/base.py'): {'a'\
        'ttrib-starts': [('DataProvider',
                          93),
                         ('DataProvider.point_map',
                          150)],
        'first-line': 161L,
        'folded-linenos': [],
        'sel-line': 175L,
        'sel-line-start': 6481L,
        'selection_end': 6481L,
        'selection_start': 6481L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/test/lib/python3.7/sre_parse.py'): {'a'\
        'ttrib-starts': [('_parse',
                          468)],
        'first-line': 635L,
        'folded-linenos': [],
        'sel-line': 644L,
        'sel-line-start': 22530L,
        'selection_end': 22530L,
        'selection_start': 22530L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/test/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'indice',
                         u'index',
                         u'cpus',
                         u'cluster',
                         u'GPU',
                         u'3',
                         u'createPolygon',
                         u'xmin',
                         u'ymax',
                         u'drape_boxes',
                         u'spatial_index',
                         u'intersection',
                         u'pd',
                         u'box.',
                         u'box',
                         u'Image',
                         u'cv2',
                         u'Image.open',
                         u'project',
                         u'gpus']
testing.stored-results = (1,
                          [(u'/Users/ben/Documents/NEON_crown_maps/tests/test_predict.py',
                            [('test_predict_tilelist',
                              0,
                              None,
                              None,
                              None,
                              1580257663,
                              42),
                             ('test_predict_tile',
                              0,
                              None,
                              None,
                              None,
                              1580257663,
                              38)]),
                           (u'/Users/ben/Documents/NEON_crown_maps/tests/test_LIDAR.py',
                            [('test_load_lidar',
                              0,
                              None,
                              None,
                              None,
                              1581106024,
                              35),
                             ('test_postprocess',
                              0,
                              None,
                              None,
                              None,
                              1581106024,
                              41)]),
                           (u'/Users/ben/Documents/NEON_crown_maps/tests/test_hard_mining.py',
                            [('test_run',
                              0,
                              None,
                              None,
                              None,
                              1580681251,
                              3)]),
                           (u'/Users/ben/Documents/NEON_crown_maps/tests/test_dask.py',
                            [('test_dask',
                              0,
                              None,
                              None,
                              None,
                              1580170653,
                              25)]),
                           (u'/Users/ben/Documents/NEON_crown_maps/tests/test_tfrecords.py',
                            [('test_create_dataset',
                              0,
                              None,
                              None,
                              None,
                              1580223548,
                              23),
                             ('test_create_tfrecords',
                              0,
                              None,
                              None,
                              None,
                              1580223548,
                              19)])],
                          {u'/Users/ben/Documents/NEON_crown_maps/test_dask.py': (u'Test process aborted: some tests were not run',
        1579123742)})
