plots<-list_annotations()
for(plotname in plots[148:length(plots)]){
print(plotname)
#get data
df<-xml_parse(get_data(plotname,"annotations"))
rgb_path<-get_data(plotname,type="rgb")
if(!file.exists(rgb_path)){
next
}
rgb<-stack(rgb_path)
chm<-raster(get_data(plotname,type="chm"))
#project
sdf<-boxes_to_spatial_polygons(df,rgb)
heights<-raster::extract(x=chm,y=sdf)
heights<-sapply(heights,function(x){
x<-x[x>0.5]
height<-quantile(x,0.99,na.rm=T)
})
if(sum(!is.na(heights))==0){next}
heights[is.na(heights)]<-0
if(sum(heights<3)>0){
plotRGB(rgb,axes=T,main=plotname)
plot(sdf,col=heights<3,add=T)
print(paste(plotname,"has polygons of height less than 3"))
}
}
library(NeonTreeEvaluation)
library(ggplot2)
library(dplyr)
no_chm<-read.csv("all_images_submission_NOCHM.csv")
chm<-read.csv("all_images_submission_CHM.csv")
#which are different in BART, strange result?
BART_chm<-chm %>% filter(plot_name %in% c("BART_050"))
BART_no_chm<-no_chm %>% filter(plot_name %in% c("BART_050"))
dim(BART_chm)
dim(BART_no_chm)
#hard to guess at
r<-stack(get_data("BART_050","rgb"))
chm<-stack(get_data("BART_050","chm"))
BART_chm<-boxes_to_spatial_polygons(BART_chm, r)
BART_no_chm<-boxes_to_spatial_polygons(BART_no_chm, r)
plotRGB(r)
plot(chm)
library(NeonTreeEvaluation)
library(ggplot2)
library(raster)
library(dplyr)
no_chm<-read.csv("all_images_submission_NOCHM.csv")
chm<-read.csv("all_images_submission_CHM.csv")
#which are different in BART, strange result?
BART_chm<-chm %>% filter(plot_name %in% c("BART_050"))
BART_no_chm<-no_chm %>% filter(plot_name %in% c("BART_050"))
dim(BART_chm)
dim(BART_no_chm)
#hard to guess at
r<-stack(get_data("BART_050","rgb"))
chm<-stack(get_data("BART_050","chm"))
BART_chm<-boxes_to_spatial_polygons(BART_chm, r)
BART_no_chm<-boxes_to_spatial_polygons(BART_no_chm, r)
plotRGB(r)
plot(chm)
plot(st_geometry(BART_no_chm),border="blue",add=T)
plot(BART_chm,border="red",add=T)
#keep plots identical?
no_chm<-no_chm %>% filter(plot_name %in% chm$plot_name)
results_no_chm<-evaluate_image_crowns(no_chm,project=T, summarize = T)
get_data("BART_050","rgb")
library(NeonTreeEvaluation)
library(ggplot2)
library(raster)
library(dplyr)
no_chm<-read.csv("all_images_submission_NOCHM.csv")
chm<-read.csv("all_images_submission_CHM.csv")
#which are different in BART, strange result?
BART_chm<-chm %>% filter(plot_name %in% c("BART_050"))
BART_no_chm<-no_chm %>% filter(plot_name %in% c("BART_050"))
dim(BART_chm)
dim(BART_no_chm)
#hard to guess at
r<-stack(get_data("BART_050","rgb"))
chm<-stack(get_data("BART_050","chm"))
BART_chm<-boxes_to_spatial_polygons(BART_chm, r)
BART_no_chm<-boxes_to_spatial_polygons(BART_no_chm, r)
plotRGB(r)
plot(chm)
plot(st_geometry(BART_no_chm),border="blue",add=T)
plot(BART_chm,border="red",add=T)
#keep plots identical?
no_chm<-no_chm %>% filter(plot_name %in% chm$plot_name)
results_no_chm<-evaluate_image_crowns(no_chm,project=T, summarize = T)
results_no_chm$by_site$Method <- "DeepForest (Weinstein et al. 2020)"
results_chm<-evaluate_image_crowns(chm, project = T, summarize = T)
results_chm$by_site$Method <- "DeepForest + LiDAR 3m Threshold"
results<-bind_rows(list(results_chm$by_site,results_no_chm$by_site))
mresults <- reshape2::melt(results, id.vars=c("Site","Method"))
ggplot(mresults,aes(x=Site,y=value,col=Method)) + geom_point(size=3,alpha=0.6) + facet_wrap(~variable,scales="free") + coord_flip()
chm<-read.csv("all_images_submission_CHM.csv")
results_chm<-evaluate_image_crowns(chm, project = T, summarize = T)
results_chm$by_site$Method <- "DeepForest + LiDAR 3m Threshold"
results<-bind_rows(list(results_chm$by_site,results_no_chm$by_site))
mresults <- reshape2::melt(results, id.vars=c("Site","Method"))
ggplot(mresults,aes(x=Site,y=value,col=Method)) + geom_point(size=3,alpha=0.6) + facet_wrap(~variable,scales="free") + coord_flip()
#ONAQ is not the prediction set
mresults<-mresults %>% filter(!Site %in% "ONAQ")
ggplot(mresults,aes(x=Site,y=value,col=Method)) + geom_point(size=3,alpha=0.6) + facet_wrap(~variable,scales="free") + coord_flip()
chm$plot_name
unique(chm$plot_name)
sum(!no_chm$plot_name %in% chm$plot_name)
chm<-chm %>% filter(plot_name %in% no_chm$plot_name)
library(NeonTreeEvaluation)
library(ggplot2)
library(raster)
library(dplyr)
no_chm<-read.csv("all_images_submission_NOCHM.csv")
chm<-read.csv("all_images_submission_CHM.csv")
#which are different in BART, strange result?
BART_chm<-chm %>% filter(plot_name %in% c("TALL"))
BART_no_chm<-no_chm %>% filter(plot_name %in% c("BART_050"))
dim(BART_chm)
dim(BART_no_chm)
#hard to guess at
r<-stack(get_data("BART_050","rgb"))
#chm<-stack(get_data("BART_050","chm"))
BART_chm<-boxes_to_spatial_polygons(BART_chm, r)
BART_no_chm<-boxes_to_spatial_polygons(BART_no_chm, r)
plotRGB(r)
#plot(chm)
plot(st_geometry(BART_no_chm),border="blue",add=T)
plot(BART_chm,border="red",add=T)
#keep plots identical?
no_chm<-no_chm %>% filter(plot_name %in% chm$plot_name)
chm<-chm %>% filter(plot_name %in% no_chm$plot_name)
results_no_chm<-evaluate_image_crowns(no_chm,project=T, summarize = T)
results_no_chm$by_site$Method <- "DeepForest (Weinstein et al. 2020)"
results_chm<-evaluate_image_crowns(chm, project = T, summarize = T)
results_chm$by_site$Method <- "DeepForest + LiDAR 3m Threshold"
results<-bind_rows(list(results_chm$by_site,results_no_chm$by_site))
mresults <- reshape2::melt(results, id.vars=c("Site","Method"))
#ONAQ is not the prediction set
mresults<-mresults %>% filter(!Site %in% "ONAQ")
ggplot(mresults,aes(x=Site,y=value,col=Method)) + geom_point(size=3,alpha=0.6) + facet_wrap(~variable,scales="free") + coord_flip()
results_chm$overall
results_no_chm$overall
ggsave("DeepForestCompare.png",height=5,width=7)
ggsave("DeepForestCompare.png",height=3,width=7)
ggsave("DeepForestCompare.png",height=4,width=7)
ggsave("DeepForestCompare.png",height=4.5,width=8)
r<-get_data("SOAP_031")
r<-get_data("SOAP_031","lidar")
plot(r)
r
library(lidR
)
plot(r)
plot(readLAS(r))
get_data()
chm
unique(chm$plot_name)
list_annotations()
r<-stack(get_data("SOAP_031","rgb"))
plotRGB(r)
a<-xml_parse(get_data("SOAP_031","rgb"))
a<-xml_parse(get_data("SOAP_031","rgb"))
a<-xml_parse(get_data("SOAP_031","annotations"))
a<-boxes_to_spatial_polygons(a)
a<-boxes_to_spatial_polygons(a,r)
plot(a,add=T)
plot(a,add=T)
plotRGB(r)
plot(a,add=T,border="orange")
plotRGB(r)
plot(a,add=T,color=NA,border="orange")
train<-read_sf("/Users/Ben/Documents/DeepTreeAttention/data/processed/CHM_filtered_train.shp")
train %>% group_by(taxonID) %>% summarise(n=n())
train %>% group_by(taxonID) %>% summarise(n=n()) %>% arrange(desc(n))
train %>% group_by(taxonID) %>% summarise(n=n()) %>% arrange(desc(n)) %>% as.data.frame()
test<-read_sf("/Users/Ben/Documents/DeepTreeAttention/data/processed/test.shp")
#Testing data from Sergio
ids<-read.csv("/Users/ben/Downloads/latest_field_and_test/test_with_uid.csv")
ids %>% filter(individualID %in% test$individualID)
ids %>% filter(individualID %in% test$individual)
missing<-ids %>% filter(!individualID %in% test$individual)
dim(missing)
missing_taxa<-ids %>% filter(!taxonID %in% test$taxonID)
missing_taxa
dim(missing_taxa
)
missing %>% filter(plotID=="KONZ_063")
ids$plantStatus == "Removed"
sum(ids$plantStatus == "Removed")
ids %>% filter(plantStatus == "Removed")
ids %>% filter(plantStatus == "Removed") %>% select(individualID)
ids %>% filter(plantStatus == "Removed") %>% dplyr::select(individualID)
missing<-ids %>% filter(!individualID %in% test$individual, !plantStatus=="Removed")
dim(missing)
missing_taxa<-ids %>% filter(!taxonID %in% test$taxonID)
missing_taxa
missing_taxa<-ids %>% filter(!taxonID %in% test$taxonID, !plantStatus=="Removed")
missing_taxa
ids %>% filter("CODR" %in% "taxonID") %>% dplyr::select(plantStatus)
ids %>% filter("CODR" %in% taxonID) %>% dplyr::select(plantStatus)
ids %>% filter(taxonID=="CODR") %>% dplyr::select(plantStatus)
train<-read_sf("/Users/Ben/Documents/DeepTreeAttention/data/processed/CHM_filtered_train.shp")
train$plantStatus
field %>% filter(individualID %in% train$individual) %>% group_by(plantStatus) %>% summarize(n=n())
missing<-ids %>% filter(!individualID %in% test$individual, !plantStatus=="Removed")
missing
missing<-ids %>% filter(!individualID %in% test$individual, str_detect("Live",plantStatus))
missing<-ids %>% filter(!individualID %in% test$individual, stringr::str_detect("Live",plantStatus))
missing<-ids %>% filter(!individualID %in% test$individual, stringr::str_detect(plantStatus,"Live"))
missing
ids.plantStatus
ids.plantStatus
table(ids$plantStatus)
#Testing data from Sergio
ids<-read.csv("/Users/ben/Downloads/latest_field_and_test/test_with_uid.csv")
table(ids$plantStatus)
test<-read_sf("/Users/Ben/Documents/DeepTreeAttention/data/processed/test.shp")
table(test$plantStatu)
plotRGB(stack("/Users/ben/Documents/NeonTreeEvaluation/evaluation/RGB/JERC_058.tif"))
plot(raster("/Users/ben/Documents/NeonTreeEvaluation/evaluation/CHM/JERC_058.tif"))
plot(raster("/Users/ben/Documents/NeonTreeEvaluation/evaluation/CHM/JERC_058_CHM.tif"))
#Missing tree height
plotRGB(stack("/Users/ben/Documents/NeonTreeEvaluation/evaluation/RGB/JERC_058.tif"))
plot(raster("/Users/ben/Documents/NeonTreeEvaluation/evaluation/CHM/JERC_058_CHM.tif",add=T))
# Chunk 1: setup
library(raster)
library(dplyr)
library(ggplot2)
library(scales)
library(tidyr)
library(stringr)
# Chunk 2
df<-read.csv("averages.csv",row.names =1)
counts<-read.csv("counts.csv")
colnames(counts)<-c("Site","geo_index","Year","n")
counts %>% group_by(Site, Year) %>% filter(!Site %in% c("GUIL","GRSM","PUUM")) %>% summarize(n=sum(n)) %>% filter(Year==max(Year)) %>% ungroup() %>% summarize(sum(n))
counts %>% group_by(Site, Year) %>% summarize(n=sum(n)) %>% filter(Year==max(Year)) %>% data.frame()
counts %>% group_by(Site) %>% summarize(n=sum(n)) %>% data.frame()
#Add a ecosystem color
envdf<-read.csv("NEON vegetation cover type from steph.csv")
sitedf<-read.csv("field-sites.csv")
merged_df<-df %>% inner_join(envdf) %>% inner_join(sitedf,by=c("Site" ="siteID")) %>% filter(!Site %in% c("PUUM","GUIL","GRSM") )
ggplot(merged_df,aes(x=n,y=height_mean/sqrt(area_mean),col=Vegetation.Cover.Type)) + geom_point(alpha=0.5, size=3) + labs(x="Tree Density (trees per km^2)",y="Tree Height / Crown Width", col="Forest Cover Type") + geom_text(aes(label=Site),size=2,hjust=0.5,vjust=-1) + theme_bw() + scale_y_continuous(n.breaks=8) + scale_color_brewer(palette="Dark2")
ggsave("Attributes.png",height=4,width=7)
ggsave("Attributes.svg", height=4,width=7)
ggplot(merged_df,aes(x=log(n),y=log(height_mean/sqrt(area_mean)),col=Domain.Name)) + geom_point(alpha=0.5, size=3) + labs(x="Tree Density (trees per km^2)",y="Tree Height / Crown Width") +geom_text(aes(label=Site),size=2,hjust=0.5,vjust=-1) + theme_bw() + scale_y_continuous(n.breaks=8)
ggsave("Attributes_domain.png",height=3.5,width=6)
ggplot(merged_df,aes(x=n,y=log(height_mean/sqrt(area_mean)),col=Domain.Name)) + geom_point(alpha=0.5, size=3) + labs(x="Tree Density (trees per km^2)",y="Tree Height / Crown Width") +geom_text(aes(label=Site),size=2,hjust=0.5,vjust=-1) + theme_bw() + scale_y_continuous(n.breaks=8)
ggplot(merged_df,aes(x=n,y=height_mean/sqrt(area_mean),col=Vegetation.Cover.Type)) + geom_point(alpha=0.5, size=3) + labs(x="Tree Density (trees per km^2)",y="Tree Height / Crown Width", col="Forest Cover Type") + geom_text(aes(label=Site),size=2,hjust=0.5,vjust=-1) + theme_bw() + scale_y_continuous(n.breaks=8) + scale_color_brewer(palette="Dark2")
ggplot(merged_df,aes(x=n,y=log(height_mean/sqrt(area_mean)),col=Vegetation.Cover.Type)) + geom_point(alpha=0.5, size=3) + labs(x="Tree Density (trees per km^2)",y="Tree Height / Crown Width", col="Forest Cover Type") + geom_text(aes(label=Site),size=2,hjust=0.5,vjust=-1) + theme_bw() + scale_y_continuous(n.breaks=8) + scale_color_brewer(palette="Dark2")
log(2)/log(3)
2/3
log(2/3)
log(10/5)
log(10/5)
10/5
log(10)/log(5)
library(dplyr)
a<-read.csv("/Users/Ben/Downloads/predictions.csv")
head(a)
a$file
unique(a$file)
head(a)
dim(a)
# Chunk 1: setup
library(raster)
library(dplyr)
library(ggplot2)
library(scales)
library(tidyr)
library(stringr)
# Chunk 2
df<-read.csv("averages.csv",row.names =1)
counts<-read.csv("counts.csv")
colnames(counts)<-c("Site","geo_index","Year","n")
counts %>% group_by(Site, Year) %>% filter(!Site %in% c("GUIL","GRSM","PUUM")) %>% summarize(n=sum(n)) %>% filter(Year==max(Year)) %>% ungroup() %>% summarize(sum(n))
counts %>% group_by(Site, Year) %>% summarize(n=sum(n)) %>% filter(Year==max(Year)) %>% data.frame()
counts %>% group_by(Site) %>% summarize(n=sum(n)) %>% data.frame()
ggplot(merged_df,aes(x=log(n),y=log(height_mean/sqrt(area_mean)),col=Domain.Name)) + geom_point(alpha=0.5, size=3) + labs(x="Log Tree Density (trees per km^2)",y="Tree Height / Crown Width") +geom_text(aes(label=Site),size=2,hjust=0.5,vjust=-1) + theme_bw() + scale_y_continuous(n.breaks=8)
#Add a ecosystem color
envdf<-read.csv("NEON vegetation cover type from steph.csv")
sitedf<-read.csv("field-sites.csv")
merged_df<-df %>% inner_join(envdf) %>% inner_join(sitedf,by=c("Site" ="siteID")) %>% filter(!Site %in% c("PUUM","GUIL","GRSM") )
ggplot(merged_df,aes(x=n,y=log(height_mean/sqrt(area_mean)),col=Vegetation.Cover.Type)) + geom_point(alpha=0.5, size=3) + labs(x="Tree Density (trees per km^2)",y="Tree Height / Crown Width", col="Forest Cover Type") + geom_text(aes(label=Site),size=2,hjust=0.5,vjust=-1) + theme_bw() + scale_y_continuous(n.breaks=8) + scale_color_brewer(palette="Dark2")
ggsave("Attributes.png",height=4,width=7)
ggsave("Attributes.svg", height=4,width=7)
ggplot(merged_df,aes(x=log(n),y=log(height_mean/sqrt(area_mean)),col=Domain.Name)) + geom_point(alpha=0.5, size=3) + labs(x="Log Tree Density (trees per km^2)",y="Tree Height / Crown Width") +geom_text(aes(label=Site),size=2,hjust=0.5,vjust=-1) + theme_bw() + scale_y_continuous(n.breaks=8)
ggsave("Attributes_domain.png",height=3.5,width=6)
ggplot(merged_df,aes(x=log(n),y=log(height_mean/sqrt(area_mean)),col=Domain.Name)) + geom_point(alpha=0.5, size=3) + labs(x="Log Tree Density (trees per km^2)",y="Log Tree Height / Log Crown Width") +geom_text(aes(label=Site),size=2,hjust=0.5,vjust=-1) + theme_bw() + scale_y_continuous(n.breaks=8)
ggsave("Attributes_domain.png",height=4,width=8)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(lme4)
library(dplyr)
library(NeonTreeEvaluation)
library(stringr)
library(sf)
library(raster)
# Chunk 2
#Read submission and turn into geospatial objects
submission<-read.csv("plot_predictions.csv")
#UNDE should be dropped from the height dataset, LIDAR isn't trustworthy.
submission<-submission %>% filter(!str_detect(plot_name,"UNDE"))
RGB_DIR<-"/Users/Ben/Documents/NeonTreeEvaluation/evaluation/RGB/"
rgb_images<-list.files(RGB_DIR,".tif",full.names = T)
rgb_images<-rgb_images[!str_detect(rgb_images,".xml")]
CHM_DIR<-"/Users/Ben/Documents/NeonTreeEvaluation/evaluation/CHM/"
CHM_images<-list.files(CHM_DIR,".tif",full.names = T)
CHM_images<-CHM_images[!str_detect(CHM_images,".xml")]
# Chunk 3
field<-read.csv("/Users/ben/Documents/NEON_crown_maps/Figures/vst_field_data.csv")
field$area<-field$maxCrownDiameter*field$ninetyCrownDiameter
field<-field %>%  filter(!is.na(itcEasting),!str_detect(eventID,"2014"),growthForm %in% c("single bole tree","multi-bole tree","small tree","sapling"),stemDiameter>15) %>% droplevels() %>% filter(height>3|is.na(height))
#field<-field %>% group_by(individualID) %>% arrange(desc(eventID)) %>% slice(1)
#Limit difference in heights
to_remove<-field %>% group_by(individualID) %>% summarize(mean=mean(height),sum_difference = abs(sum(diff(height)))) %>% filter(sum_difference > 8)
field<-field %>% filter(!individualID %in% to_remove$individualID)
# Chunk 4
matched_pairs<-function(spatial_boxes,field_points){
#Spatial join
possible_matches<-st_join(spatial_boxes,field_points,left=FALSE)
#If there are heights, take the tallest height
tallest_points<-possible_matches %>% group_by(crown_id) %>% mutate(height_diff=height.x - height.y) %>%arrange(height_diff) %>% slice(1)  %>% as.data.frame()%>% dplyr::select(crown_id, individualID)
matched_height<-possible_matches %>% inner_join(tallest_points)
return(matched_height)
}
# Chunk 5
site_plots<-field %>% group_by(plotID,individualID)  %>% summarize(samples=length(unique(eventID))) %>% filter(samples>1) %>% ungroup() %>% mutate(plotID=as.character(plotID))
results<-list()
for(x in unique(site_plots$plotID)){
print(x)
#x<-"OSBS_022"
#matching RGB tile
rgb_path<-rgb_images[str_detect(rgb_images,x)]
if(length(rgb_path)==0){next}
r<-raster::stack(rgb_path)
#Field data, min height threshold is 3.
field_points<-field %>% filter(plotID==x) %>% st_as_sf(.,coords=c("itcEasting","itcNorthing")) %>% filter(height>3)
st_crs(field_points)<-crs(r)
predictions<-submission %>% filter(plot_name==x)
if(nrow(predictions)==0){next}
spatial_boxes<- predictions %>% NeonTreeEvaluation::boxes_to_spatial_polygons(.,r) %>% st_as_sf() %>% mutate(height=predictions$height, score=predictions$score)
#Filter the field data for erroneous temporal connections, the CHM must have positive heights, see OSBS_022, can use as an example of all sorts of challenges.
CHM_path<-CHM_images[str_detect(CHM_images,x)]
chm<-raster(CHM_path)
#Thresholds
field_points$CHM_height<-extract(chm,field_points)
#Could it be seen?
field_points<-field_points %>% filter(abs(CHM_height-height)<4)
#Min height based on the predictions
#field_points<-field_points[field_points$height > quantile(spatial_boxes$height,0.01),]
plotRGB(r)
plot(st_geometry(spatial_boxes),add=T)
plot(st_geometry(field_points),add=T,col="red",pch=20)
#Missing
missing<-field_points[!lengths(st_intersects(field_points, spatial_boxes)), ]
plot(st_geometry(missing),add=T,col="blue",pch=20)
#Stem recall rate
unique_locations<-field_points %>% distinct(individualID,.keep_all = T)
tree_in_prediction <-unique_locations  %>% sf::st_intersects(x=.,y=spatial_boxes)
#Which match, do not allow multiples to double count.
matches<-lengths(tree_in_prediction)
matches[matches>1]<-1
stem_recall<-sum(matches)/nrow(unique_locations)
#unique matches
joined_df<-st_join(spatial_boxes,unique_locations)
single_matches<-joined_df %>% group_by(crown_id) %>% filter(height.y == max(height.y))
single_recall<-nrow(single_matches)/nrow(unique_locations)
#Create point matches between data and predictions
matched_df<-matched_pairs(spatial_boxes, field_points) %>% mutate(plot_name=x)
if(nrow(matched_df)>0){
results[[x]]<-data.frame(matched_df,stem_recall,single_recall)
}
}
results<-bind_rows(results)
# Chunk 6
#Show difference
# CLBJ has 3 data points.drop
height_summary<-results  %>% filter(!siteID %in% "CLBJ") %>% mutate(Site=str_match(plot_name,"(\\w+)_")[,2]) %>% group_by(Site,plot_name,individualID,crown_id) %>%  summarize(predicted_height=unique(height.x)[1],mean_field=mean(height.y),min_field=min(height.y),max_field=max(height.y)) %>% mutate(field_range=max_field - min_field)
ggplot(height_summary,aes(x=predicted_height,y=mean_field,ymin=min_field,ymax=max_field)) + geom_pointrange(size=0.1,alpha=0.5) + geom_abline(linetype="dashed") + coord_flip() + labs(y="Field Height (m)",x="Predicted Height (m)")  + stat_smooth(method="lm")  + facet_wrap(~Site,scales="free")
ggsave("Height_Comparison.png",height=7,width=10)
# Chunk 7
ggplot(height_summary,aes(x=field_range)) + geom_density(fill="black") + facet_wrap(~Site,scales="free") + labs(x="Height difference (m) among years for the same ID")
ggplot(height_summary,aes(x=mean_field,y=field_range)) + geom_point() + labs(x="Mean Field Height",y="Range of Heights")
# Chunk 8
mod<-lmer(data=height_summary,mean_field~predicted_height|Site)
sqrt(mean(residuals(mod)^2))
rmse_site<-height_summary %>% ungroup() %>% mutate(mod_error=as.numeric(residuals(mod)))%>% group_by(Site) %>% summarize(RMSE=sqrt(mean(mod_error^2)))
ggplot(height_summary,aes(x=predicted_height,y=mean_field,ymin=min_field,ymax=max_field)) + geom_pointrange(size=0.1,alpha=0.5) + geom_abline(linetype="dashed") + coord_flip() + labs(y="Field Height (m)",x="Predicted Height (m)")  + stat_smooth(method="lm")  + facet_wrap(~Site,scales="free")
ggsave("Height_Comparison.svg",height=7,width=10)
# Chunk 9
height_summary %>% mutate(error=abs(mean_field - predicted_height)) %>% group_by(Site) %>% filter(error==max(error)) %>% arrange(desc(error)) %>% as.data.frame()
#   ylim(min(c(min(height_summary$min_field,height_summary$predicted_height))),max(c(height_summary$predicted_height,height_summary$max_field))) + xlim(min(c(min(height_summary$min_field,height_summary$predicted_height))),max(c(height_summary$predicted_height,height_summary$max_field)))
# Chunk 10
#order by mean
order_site<-results %>% group_by(siteID) %>% summarize(mean=mean(stem_recall)) %>% arrange(desc(mean)) %>% .$siteID
recall_data<-results %>% group_by(plot_name,crown_id) %>% arrange(desc(eventID)) %>% slice(1) %>% group_by(siteID,plot_name)  %>% distinct(stem_recall, single_recall) %>% ungroup() %>% mutate(siteID=factor(siteID,order_site))
recall_data_melt<-reshape2::melt(recall_data,id.vars=c("siteID","plot_name"))
levels(recall_data_melt$variable)<-c("All Matches","Unique Matches")
recall_data_melt%>% ggplot(.,aes(x=siteID,y=value,fill=variable)) + geom_boxplot(alpha=0.6) + theme_bw() + scale_y_continuous("Field Stem Recall (%)", label=scales::percent,limits = c(0,1)) + coord_flip() + labs(x="Site")
ggsave("SiteStemRecall.svg",height=5,width=6)
ggsave("SiteStemRecall.png",height=5,width=6)
recall_data%>% ggplot(.,aes(x=siteID,y=single_recall)) + geom_boxplot(alpha=0.6) + theme_bw() + scale_y_continuous("Field Stem Recall (%)", label=scales::percent,limits = c(0,1)) + coord_flip() + labs(x="Site")
ggsave("SiteStemRecall_unique.png",height=5,width=6)
ggsave("SiteStemRecall_unique.svg",height=5,width=6)
results %>% group_by(plot_name,crown_id) %>% arrange(desc(eventID)) %>% slice(1) %>% group_by(siteID)%>% summarize(stem_recall=mean(stem_recall))
results %>% group_by(plot_name,crown_id) %>% arrange(desc(eventID)) %>% slice(1) %>% ungroup() %>% summarize(stem_recall=mean(stem_recall),single_recall=mean(single_recall))
site_plots<-field %>% group_by(plotID,individualID)  %>% summarize(samples=length(unique(eventID))) %>% filter(samples>1) %>% ungroup() %>% mutate(plotID=as.character(plotID))
results<-list()
for(x in unique(site_plots$plotID)){
print(x)
#x<-"OSBS_022"
#matching RGB tile
rgb_path<-rgb_images[str_detect(rgb_images,x)]
if(length(rgb_path)==0){next}
r<-raster::stack(rgb_path)
#Field data, min height threshold is 3.
field_points<-field %>% filter(plotID==x) %>% st_as_sf(.,coords=c("itcEasting","itcNorthing")) %>% filter(height>3)
st_crs(field_points)<-crs(r)
predictions<-submission %>% filter(plot_name==x)
if(nrow(predictions)==0){next}
spatial_boxes<- predictions %>% NeonTreeEvaluation::boxes_to_spatial_polygons(.,r) %>% st_as_sf() %>% mutate(height=predictions$height, score=predictions$score)
#Filter the field data for erroneous temporal connections, the CHM must have positive heights, see OSBS_022, can use as an example of all sorts of challenges.
CHM_path<-CHM_images[str_detect(CHM_images,x)]
chm<-raster(CHM_path)
#Thresholds
field_points$CHM_height<-raster::extract(chm,field_points)
#Could it be seen?
field_points<-field_points %>% filter(abs(CHM_height-height)<4)
#Min height based on the predictions
#field_points<-field_points[field_points$height > quantile(spatial_boxes$height,0.01),]
plotRGB(r)
plot(st_geometry(spatial_boxes),add=T)
plot(st_geometry(field_points),add=T,col="red",pch=20)
#Missing
missing<-field_points[!lengths(st_intersects(field_points, spatial_boxes)), ]
plot(st_geometry(missing),add=T,col="blue",pch=20)
#Stem recall rate
unique_locations<-field_points %>% distinct(individualID,.keep_all = T)
tree_in_prediction <-unique_locations  %>% sf::st_intersects(x=.,y=spatial_boxes)
#Which match, do not allow multiples to double count.
matches<-lengths(tree_in_prediction)
matches[matches>1]<-1
stem_recall<-sum(matches)/nrow(unique_locations)
#unique matches
joined_df<-st_join(spatial_boxes,unique_locations)
single_matches<-joined_df %>% group_by(crown_id) %>% filter(height.y == max(height.y))
single_recall<-nrow(single_matches)/nrow(unique_locations)
#Create point matches between data and predictions
matched_df<-matched_pairs(spatial_boxes, field_points) %>% mutate(plot_name=x)
if(nrow(matched_df)>0){
results[[x]]<-data.frame(matched_df,stem_recall,single_recall)
}
}
results<-bind_rows(results)
#Show difference
# CLBJ has 3 data points.drop
height_summary<-results  %>% filter(!siteID %in% "CLBJ") %>% mutate(Site=str_match(plot_name,"(\\w+)_")[,2]) %>% group_by(Site,plot_name,individualID,crown_id) %>%  summarize(predicted_height=unique(height.x)[1],mean_field=mean(height.y),min_field=min(height.y),max_field=max(height.y)) %>% mutate(field_range=max_field - min_field)
ggplot(height_summary,aes(x=predicted_height,y=mean_field,ymin=min_field,ymax=max_field)) + geom_pointrange(size=0.1,alpha=0.5) + geom_abline(linetype="dashed") + coord_flip() + labs(y="Field Height (m)",x="Predicted Height (m)")  + stat_smooth(method="lm")  + facet_wrap(~Site,scales="free")
#order by mean
order_site<-results %>% group_by(siteID) %>% summarize(mean=mean(stem_recall)) %>% arrange(desc(mean)) %>% .$siteID
recall_data<-results %>% group_by(plot_name,crown_id) %>% arrange(desc(eventID)) %>% slice(1) %>% group_by(siteID,plot_name)  %>% distinct(stem_recall, single_recall) %>% ungroup() %>% mutate(siteID=factor(siteID,order_site))
recall_data_melt<-reshape2::melt(recall_data,id.vars=c("siteID","plot_name"))
levels(recall_data_melt$variable)<-c("All Matches","Unique Matches")
recall_data_melt%>% ggplot(.,aes(x=siteID,y=value,fill=variable)) + geom_boxplot(alpha=0.6) + theme_bw() + scale_y_continuous("Field Stem Recall (%)", label=scales::percent,limits = c(0,1)) + coord_flip() + labs(x="Site")
ggsave("SiteStemRecall.svg",height=5,width=6)
ggsave("SiteStemRecall.png",height=5,width=6)
recall_data%>% ggplot(.,aes(x=siteID,y=single_recall)) + geom_boxplot(alpha=0.6) + theme_bw() + scale_y_continuous("Field Stem Recall (%)", label=scales::percent,limits = c(0,1)) + coord_flip() + labs(x="Site")
ggsave("SiteStemRecall_unique.png",height=5,width=6)
ggsave("SiteStemRecall_unique.svg",height=5,width=6)
results %>% group_by(plot_name,crown_id) %>% arrange(desc(eventID)) %>% slice(1) %>% group_by(siteID)%>% summarize(stem_recall=mean(stem_recall))
results %>% group_by(plot_name,crown_id) %>% arrange(desc(eventID)) %>% slice(1) %>% ungroup() %>% summarize(stem_recall=mean(stem_recall),single_recall=mean(single_recall))
recall_data_melt
head(recall_data_melt)
recall_data_melt %>% arrange(value)
x = "OSBS_032"
#x<-"OSBS_022"
#matching RGB tile
rgb_path<-rgb_images[str_detect(rgb_images,x)]
if(length(rgb_path)==0){next}
r<-raster::stack(rgb_path)
#Field data, min height threshold is 3.
field_points<-field %>% filter(plotID==x) %>% st_as_sf(.,coords=c("itcEasting","itcNorthing")) %>% filter(height>3)
st_crs(field_points)<-crs(r)
predictions<-submission %>% filter(plot_name==x)
if(nrow(predictions)==0){next}
spatial_boxes<- predictions %>% NeonTreeEvaluation::boxes_to_spatial_polygons(.,r) %>% st_as_sf() %>% mutate(height=predictions$height, score=predictions$score)
#Filter the field data for erroneous temporal connections, the CHM must have positive heights, see OSBS_022, can use as an example of all sorts of challenges.
CHM_path<-CHM_images[str_detect(CHM_images,x)]
chm<-raster(CHM_path)
#Thresholds
field_points$CHM_height<-raster::extract(chm,field_points)
#Could it be seen?
field_points<-field_points %>% filter(abs(CHM_height-height)<4)
plotRGB(r)
plot(st_geometry(spatial_boxes),add=T)
plot(st_geometry(field_points),add=T,col="red",pch=20)
spatial_boxes
spatial_boxes$height
field_points$height
chm
plot(chm)
plot(st_geometry(field_points),add=T,col="red",pch=20)
field_points$stemDiameter
field_points$plantStatus
plotRGB(r)
plot(st_geometry(spatial_boxes),add=T)
plot(st_geometry(field_points),add=T,col=field_points$plantStatus,pch=20)
field_points$eventID
plot(st_geometry(field_points),add=T,col=field_points$eventID,pch=20)
